// FIXME several connections with the same receiver
// (eq:then in this case) is NEEDED for cases like this

const {
    firstLineTpl string = '$0 bottles of beer on the wall, $0 bottles of beer.'
    secondLineTpl1 string = 'Take one down and pass it around, $0 bottles of beer on the wall.'
    secondLine2 string = 'Take one down and pass it around, no more bottles of beer on the wall.'
}

component Looper(old int) (new int) {
    nodes {
        Eq<int>
        Printer<any>
        Decrementor<int>
        fprinter1 FPrinter<int>
        fprinter2 FPrinter<int>
    }
    net {
        // print first line
        :old -> [
            fprinter1:args[0],
            ($firstLineTpl -> fprinter1:tpl)
        ]
        // decrement from old
        fprinter1:args[0] -> decrementor:data
        // if decremented == 0
        decrementor:res -> [
            eq:a,
            (0 -> eq:b)
        ]
        // then print second line
        eq:then -> ($secondLine2 -> printer:data)
        // end send new to out
        printer:sig -> (eq:then -> :new)
        // else print another second line
        eq:else.a -> [
            fprinter2:args[0],
            ($secondLineTpl1 -> fprinter2:tpl)
        ]
        // and send new to out
        fprinter2:args[0] -> :new
    }
}
