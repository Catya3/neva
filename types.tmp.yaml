# foo.yml

# type mapAlias<t,y> = map<t,y>
# type intMap<t> = y<t, int>
# type myStr = str
# const intMapMsg intMap<myStr> = {'': 0}

# resolving
# resolved entity is:
# - a component
# - or an interface
# - or a resolved type
# - where all type arguments are resolved (types? entities?)
# intMap<myStr> = map<str, int>
# Foo<intMap<myStr>> = Foo<map<str, int>>

# myStr:
# kind: type
# type:
# kind: alias
# expr:
# ref: str
# args: []
# point:
# kind: type
# def:
# ref: struct
# args:

myStr: # primitive type alias
  kind: type
  type:
    ref: str

mapAlias: # generic type alias
  kind: type
  type:
    ref: map

intMap: # generic type wrapper
  kind: type
  type:
    ref: map
    params: [t]
    args: [int, t]

foo_io:
  kind: io
  in:
    a:
      type:
        ref: myStr
  out:
    b:
    type:
    def: ... # TODO

foo:
  kind: component
  component:
    io:
      ref: IFoo
