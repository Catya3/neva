// Code generated by tygo. DO NOT EDIT.

//////////
// source: src.go
/*
This package defines source code entities - abstractions that end-user (a programmer) operates on.
For convenience these structures have json tags. This is not clean architecture but it's very handy for LSP.
*/

export type Program = { [key: string]: Package};
export type Package = { [key: string]: File};
export interface File {
  imports?: { [key: string]: string};
  entities?: { [key: string]: Entity};
}
/**
 * TODO make const, type, interface and components pointers
 */
export interface Entity {
  exported?: boolean;
  kind?: EntityKind;
  const?: Const;
  type?: any /* ts.Def */;
  interface?: Interface;
  component?: Component;
}
export type EntityKind = string; // It's handy to transmit strings enum instead of digital
export const ComponentEntity: EntityKind = "component_entity";
export const ConstEntity: EntityKind = "const_entity";
export const TypeEntity: EntityKind = "type_entity";
export const InterfaceEntity: EntityKind = "interface_entity";
export interface Component {
  interface?: Interface;
  nodes?: { [key: string]: Node};
  net?: Connection[]; // Can't be map, connection side can't be map key due to selectors
}
export interface Interface {
  typeParams?: any /* ts.Param */[];
  io?: IO;
}
export interface Node {
  entityRef?: EntityRef;
  typeArgs?: any /* ts.Expr */[];
  componentDi?: { [key: string]: Node};
}
export interface EntityRef {
  pkg?: string;
  name?: string;
}
export interface Const {
  ref?: EntityRef;
  value?: Msg;
}
export interface Msg {
  typeExpr?: any /* ts.Expr */;
  bool?: boolean;
  int?: number /* int */;
  float?: number /* float64 */;
  str?: string;
  vec?: Const[];
  map?: { [key: string]: Const};
}
export interface IO {
  in?: { [key: string]: Port};
  out?: { [key: string]: Port};
}
export interface Port {
  typeExpr?: any /* ts.Expr */;
  isArray?: boolean;
}
export interface Connection {
  senderSide?: SenderConnectionSide;
  receiverSide?: ReceiverConnectionSide[];
}
export interface ReceiverConnectionSide {
  portAddr?: PortAddr;
  selectors?: string[];
}
/**
 * SenderConnectionSide unlike ReceiverConnectionSide could refer to constant.
 */
export interface SenderConnectionSide {
  portAddr?: PortAddr;
  constRef?: EntityRef;
  selectors?: string[];
}
export interface PortAddr {
  node?: string;
  port?: string;
  idx?: number /* uint8 */;
}
