// source: api/devserver.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require("google-protobuf")
var goog = jspb
var global = function () {
  if (this) {
    return this
  }
  if (typeof window !== "undefined") {
    return window
  }
  if (typeof global !== "undefined") {
    return global
  }
  if (typeof self !== "undefined") {
    return self
  }
  return Function("return this")()
}.call(null)

goog.exportSymbol("proto.devserver.Component", null, global)
goog.exportSymbol("proto.devserver.ComponentIO", null, global)
goog.exportSymbol("proto.devserver.ComponentType", null, global)
goog.exportSymbol("proto.devserver.ConnectionAddr", null, global)
goog.exportSymbol("proto.devserver.DebugEvent", null, global)
goog.exportSymbol("proto.devserver.DebugRequest", null, global)
goog.exportSymbol("proto.devserver.DebugResponse", null, global)
goog.exportSymbol("proto.devserver.GetProgramRequest", null, global)
goog.exportSymbol("proto.devserver.GetProgramResponse", null, global)
goog.exportSymbol("proto.devserver.ListProgramsRequest", null, global)
goog.exportSymbol("proto.devserver.ListProgramsResponse", null, global)
goog.exportSymbol("proto.devserver.Module", null, global)
goog.exportSymbol("proto.devserver.ModuleConnection", null, global)
goog.exportSymbol("proto.devserver.ModuleConst", null, global)
goog.exportSymbol("proto.devserver.Msg", null, global)
goog.exportSymbol("proto.devserver.Operator", null, global)
goog.exportSymbol("proto.devserver.Port", null, global)
goog.exportSymbol("proto.devserver.Program", null, global)
goog.exportSymbol("proto.devserver.ProgramImports", null, global)
goog.exportSymbol("proto.devserver.ProgramMeta", null, global)
goog.exportSymbol("proto.devserver.StartDebugRequest", null, global)
goog.exportSymbol("proto.devserver.StartDebugResponse", null, global)
goog.exportSymbol("proto.devserver.UpdateProgramRequest", null, global)
goog.exportSymbol("proto.devserver.UpdateProgramResponse", null, global)
goog.exportSymbol("proto.devserver.ValueType", null, global)
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.devserver.DebugRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.devserver.DebugRequest, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.devserver.DebugRequest.displayName = "proto.devserver.DebugRequest"
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.devserver.DebugResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.devserver.DebugResponse, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.devserver.DebugResponse.displayName = "proto.devserver.DebugResponse"
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.devserver.StartDebugRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.devserver.StartDebugRequest, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.devserver.StartDebugRequest.displayName =
    "proto.devserver.StartDebugRequest"
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.devserver.StartDebugResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.devserver.StartDebugResponse, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.devserver.StartDebugResponse.displayName =
    "proto.devserver.StartDebugResponse"
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.devserver.DebugEvent = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.devserver.DebugEvent, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.devserver.DebugEvent.displayName = "proto.devserver.DebugEvent"
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.devserver.Msg = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.devserver.Msg, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.devserver.Msg.displayName = "proto.devserver.Msg"
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.devserver.ListProgramsRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.devserver.ListProgramsRequest, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.devserver.ListProgramsRequest.displayName =
    "proto.devserver.ListProgramsRequest"
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.devserver.ListProgramsResponse = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.devserver.ListProgramsResponse.repeatedFields_,
    null
  )
}
goog.inherits(proto.devserver.ListProgramsResponse, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.devserver.ListProgramsResponse.displayName =
    "proto.devserver.ListProgramsResponse"
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.devserver.GetProgramRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.devserver.GetProgramRequest, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.devserver.GetProgramRequest.displayName =
    "proto.devserver.GetProgramRequest"
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.devserver.GetProgramResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.devserver.GetProgramResponse, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.devserver.GetProgramResponse.displayName =
    "proto.devserver.GetProgramResponse"
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.devserver.UpdateProgramRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.devserver.UpdateProgramRequest, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.devserver.UpdateProgramRequest.displayName =
    "proto.devserver.UpdateProgramRequest"
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.devserver.UpdateProgramResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.devserver.UpdateProgramResponse, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.devserver.UpdateProgramResponse.displayName =
    "proto.devserver.UpdateProgramResponse"
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.devserver.Program = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.devserver.Program, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.devserver.Program.displayName = "proto.devserver.Program"
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.devserver.ProgramMeta = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.devserver.ProgramMeta, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.devserver.ProgramMeta.displayName = "proto.devserver.ProgramMeta"
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.devserver.ProgramImports = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.devserver.ProgramImports, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.devserver.ProgramImports.displayName = "proto.devserver.ProgramImports"
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.devserver.Component = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.devserver.Component, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.devserver.Component.displayName = "proto.devserver.Component"
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.devserver.Operator = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.devserver.Operator, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.devserver.Operator.displayName = "proto.devserver.Operator"
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.devserver.Module = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.devserver.Module.repeatedFields_,
    null
  )
}
goog.inherits(proto.devserver.Module, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.devserver.Module.displayName = "proto.devserver.Module"
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.devserver.ModuleConst = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.devserver.ModuleConst, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.devserver.ModuleConst.displayName = "proto.devserver.ModuleConst"
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.devserver.ModuleConnection = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.devserver.ModuleConnection, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.devserver.ModuleConnection.displayName =
    "proto.devserver.ModuleConnection"
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.devserver.ConnectionAddr = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.devserver.ConnectionAddr, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.devserver.ConnectionAddr.displayName = "proto.devserver.ConnectionAddr"
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.devserver.ComponentIO = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.devserver.ComponentIO, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.devserver.ComponentIO.displayName = "proto.devserver.ComponentIO"
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.devserver.Port = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.devserver.Port, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.devserver.Port.displayName = "proto.devserver.Port"
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.devserver.DebugRequest.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.devserver.DebugRequest.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.devserver.DebugRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.devserver.DebugRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        msg:
          (f = msg.getMsg()) &&
          proto.devserver.Msg.toObject(includeInstance, f),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.devserver.DebugRequest}
 */
proto.devserver.DebugRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.devserver.DebugRequest()
  return proto.devserver.DebugRequest.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.devserver.DebugRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.devserver.DebugRequest}
 */
proto.devserver.DebugRequest.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = new proto.devserver.Msg()
        reader.readMessage(
          value,
          proto.devserver.Msg.deserializeBinaryFromReader
        )
        msg.setMsg(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.devserver.DebugRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.devserver.DebugRequest.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.devserver.DebugRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.devserver.DebugRequest.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined
  f = message.getMsg()
  if (f != null) {
    writer.writeMessage(1, f, proto.devserver.Msg.serializeBinaryToWriter)
  }
}

/**
 * optional Msg msg = 1;
 * @return {?proto.devserver.Msg}
 */
proto.devserver.DebugRequest.prototype.getMsg = function () {
  return /** @type{?proto.devserver.Msg} */ (
    jspb.Message.getWrapperField(this, proto.devserver.Msg, 1)
  )
}

/**
 * @param {?proto.devserver.Msg|undefined} value
 * @return {!proto.devserver.DebugRequest} returns this
 */
proto.devserver.DebugRequest.prototype.setMsg = function (value) {
  return jspb.Message.setWrapperField(this, 1, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.devserver.DebugRequest} returns this
 */
proto.devserver.DebugRequest.prototype.clearMsg = function () {
  return this.setMsg(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.devserver.DebugRequest.prototype.hasMsg = function () {
  return jspb.Message.getField(this, 1) != null
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.devserver.DebugResponse.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.devserver.DebugResponse.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.devserver.DebugResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.devserver.DebugResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {}

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.devserver.DebugResponse}
 */
proto.devserver.DebugResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.devserver.DebugResponse()
  return proto.devserver.DebugResponse.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.devserver.DebugResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.devserver.DebugResponse}
 */
proto.devserver.DebugResponse.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.devserver.DebugResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.devserver.DebugResponse.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.devserver.DebugResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.devserver.DebugResponse.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.devserver.StartDebugRequest.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.devserver.StartDebugRequest.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.devserver.StartDebugRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.devserver.StartDebugRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        path: jspb.Message.getFieldWithDefault(msg, 1, ""),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.devserver.StartDebugRequest}
 */
proto.devserver.StartDebugRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.devserver.StartDebugRequest()
  return proto.devserver.StartDebugRequest.deserializeBinaryFromReader(
    msg,
    reader
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.devserver.StartDebugRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.devserver.StartDebugRequest}
 */
proto.devserver.StartDebugRequest.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setPath(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.devserver.StartDebugRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.devserver.StartDebugRequest.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.devserver.StartDebugRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.devserver.StartDebugRequest.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined
  f = message.getPath()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
}

/**
 * optional string path = 1;
 * @return {string}
 */
proto.devserver.StartDebugRequest.prototype.getPath = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""))
}

/**
 * @param {string} value
 * @return {!proto.devserver.StartDebugRequest} returns this
 */
proto.devserver.StartDebugRequest.prototype.setPath = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.devserver.StartDebugResponse.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.devserver.StartDebugResponse.toObject(
      opt_includeInstance,
      this
    )
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.devserver.StartDebugResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.devserver.StartDebugResponse.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        event:
          (f = msg.getEvent()) &&
          proto.devserver.DebugEvent.toObject(includeInstance, f),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.devserver.StartDebugResponse}
 */
proto.devserver.StartDebugResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.devserver.StartDebugResponse()
  return proto.devserver.StartDebugResponse.deserializeBinaryFromReader(
    msg,
    reader
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.devserver.StartDebugResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.devserver.StartDebugResponse}
 */
proto.devserver.StartDebugResponse.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = new proto.devserver.DebugEvent()
        reader.readMessage(
          value,
          proto.devserver.DebugEvent.deserializeBinaryFromReader
        )
        msg.setEvent(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.devserver.StartDebugResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.devserver.StartDebugResponse.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.devserver.StartDebugResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.devserver.StartDebugResponse.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined
  f = message.getEvent()
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.devserver.DebugEvent.serializeBinaryToWriter
    )
  }
}

/**
 * optional DebugEvent event = 1;
 * @return {?proto.devserver.DebugEvent}
 */
proto.devserver.StartDebugResponse.prototype.getEvent = function () {
  return /** @type{?proto.devserver.DebugEvent} */ (
    jspb.Message.getWrapperField(this, proto.devserver.DebugEvent, 1)
  )
}

/**
 * @param {?proto.devserver.DebugEvent|undefined} value
 * @return {!proto.devserver.StartDebugResponse} returns this
 */
proto.devserver.StartDebugResponse.prototype.setEvent = function (value) {
  return jspb.Message.setWrapperField(this, 1, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.devserver.StartDebugResponse} returns this
 */
proto.devserver.StartDebugResponse.prototype.clearEvent = function () {
  return this.setEvent(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.devserver.StartDebugResponse.prototype.hasEvent = function () {
  return jspb.Message.getField(this, 1) != null
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.devserver.DebugEvent.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.devserver.DebugEvent.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.devserver.DebugEvent} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.devserver.DebugEvent.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        from: jspb.Message.getFieldWithDefault(msg, 1, ""),
        to: jspb.Message.getFieldWithDefault(msg, 2, ""),
        msg:
          (f = msg.getMsg()) &&
          proto.devserver.Msg.toObject(includeInstance, f),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.devserver.DebugEvent}
 */
proto.devserver.DebugEvent.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.devserver.DebugEvent()
  return proto.devserver.DebugEvent.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.devserver.DebugEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.devserver.DebugEvent}
 */
proto.devserver.DebugEvent.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setFrom(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setTo(value)
        break
      case 3:
        var value = new proto.devserver.Msg()
        reader.readMessage(
          value,
          proto.devserver.Msg.deserializeBinaryFromReader
        )
        msg.setMsg(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.devserver.DebugEvent.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.devserver.DebugEvent.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.devserver.DebugEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.devserver.DebugEvent.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined
  f = message.getFrom()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
  f = message.getTo()
  if (f.length > 0) {
    writer.writeString(2, f)
  }
  f = message.getMsg()
  if (f != null) {
    writer.writeMessage(3, f, proto.devserver.Msg.serializeBinaryToWriter)
  }
}

/**
 * optional string from = 1;
 * @return {string}
 */
proto.devserver.DebugEvent.prototype.getFrom = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""))
}

/**
 * @param {string} value
 * @return {!proto.devserver.DebugEvent} returns this
 */
proto.devserver.DebugEvent.prototype.setFrom = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * optional string to = 2;
 * @return {string}
 */
proto.devserver.DebugEvent.prototype.getTo = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""))
}

/**
 * @param {string} value
 * @return {!proto.devserver.DebugEvent} returns this
 */
proto.devserver.DebugEvent.prototype.setTo = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value)
}

/**
 * optional Msg msg = 3;
 * @return {?proto.devserver.Msg}
 */
proto.devserver.DebugEvent.prototype.getMsg = function () {
  return /** @type{?proto.devserver.Msg} */ (
    jspb.Message.getWrapperField(this, proto.devserver.Msg, 3)
  )
}

/**
 * @param {?proto.devserver.Msg|undefined} value
 * @return {!proto.devserver.DebugEvent} returns this
 */
proto.devserver.DebugEvent.prototype.setMsg = function (value) {
  return jspb.Message.setWrapperField(this, 3, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.devserver.DebugEvent} returns this
 */
proto.devserver.DebugEvent.prototype.clearMsg = function () {
  return this.setMsg(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.devserver.DebugEvent.prototype.hasMsg = function () {
  return jspb.Message.getField(this, 3) != null
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.devserver.Msg.prototype.toObject = function (opt_includeInstance) {
    return proto.devserver.Msg.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.devserver.Msg} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.devserver.Msg.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        type: jspb.Message.getFieldWithDefault(msg, 1, 0),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.devserver.Msg}
 */
proto.devserver.Msg.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.devserver.Msg()
  return proto.devserver.Msg.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.devserver.Msg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.devserver.Msg}
 */
proto.devserver.Msg.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {!proto.devserver.ValueType} */ (
          reader.readEnum()
        )
        msg.setType(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.devserver.Msg.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.devserver.Msg.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.devserver.Msg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.devserver.Msg.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getType()
  if (f !== 0.0) {
    writer.writeEnum(1, f)
  }
}

/**
 * optional ValueType type = 1;
 * @return {!proto.devserver.ValueType}
 */
proto.devserver.Msg.prototype.getType = function () {
  return /** @type {!proto.devserver.ValueType} */ (
    jspb.Message.getFieldWithDefault(this, 1, 0)
  )
}

/**
 * @param {!proto.devserver.ValueType} value
 * @return {!proto.devserver.Msg} returns this
 */
proto.devserver.Msg.prototype.setType = function (value) {
  return jspb.Message.setProto3EnumField(this, 1, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.devserver.ListProgramsRequest.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.devserver.ListProgramsRequest.toObject(
      opt_includeInstance,
      this
    )
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.devserver.ListProgramsRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.devserver.ListProgramsRequest.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {}

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.devserver.ListProgramsRequest}
 */
proto.devserver.ListProgramsRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.devserver.ListProgramsRequest()
  return proto.devserver.ListProgramsRequest.deserializeBinaryFromReader(
    msg,
    reader
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.devserver.ListProgramsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.devserver.ListProgramsRequest}
 */
proto.devserver.ListProgramsRequest.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.devserver.ListProgramsRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.devserver.ListProgramsRequest.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.devserver.ListProgramsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.devserver.ListProgramsRequest.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.devserver.ListProgramsResponse.repeatedFields_ = [1]

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.devserver.ListProgramsResponse.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.devserver.ListProgramsResponse.toObject(
      opt_includeInstance,
      this
    )
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.devserver.ListProgramsResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.devserver.ListProgramsResponse.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        pathsList:
          (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.devserver.ListProgramsResponse}
 */
proto.devserver.ListProgramsResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.devserver.ListProgramsResponse()
  return proto.devserver.ListProgramsResponse.deserializeBinaryFromReader(
    msg,
    reader
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.devserver.ListProgramsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.devserver.ListProgramsResponse}
 */
proto.devserver.ListProgramsResponse.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.addPaths(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.devserver.ListProgramsResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.devserver.ListProgramsResponse.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.devserver.ListProgramsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.devserver.ListProgramsResponse.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined
  f = message.getPathsList()
  if (f.length > 0) {
    writer.writeRepeatedString(1, f)
  }
}

/**
 * repeated string paths = 1;
 * @return {!Array<string>}
 */
proto.devserver.ListProgramsResponse.prototype.getPathsList = function () {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1))
}

/**
 * @param {!Array<string>} value
 * @return {!proto.devserver.ListProgramsResponse} returns this
 */
proto.devserver.ListProgramsResponse.prototype.setPathsList = function (value) {
  return jspb.Message.setField(this, 1, value || [])
}

/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.devserver.ListProgramsResponse} returns this
 */
proto.devserver.ListProgramsResponse.prototype.addPaths = function (
  value,
  opt_index
) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index)
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.devserver.ListProgramsResponse} returns this
 */
proto.devserver.ListProgramsResponse.prototype.clearPathsList = function () {
  return this.setPathsList([])
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.devserver.GetProgramRequest.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.devserver.GetProgramRequest.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.devserver.GetProgramRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.devserver.GetProgramRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        path: jspb.Message.getFieldWithDefault(msg, 1, ""),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.devserver.GetProgramRequest}
 */
proto.devserver.GetProgramRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.devserver.GetProgramRequest()
  return proto.devserver.GetProgramRequest.deserializeBinaryFromReader(
    msg,
    reader
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.devserver.GetProgramRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.devserver.GetProgramRequest}
 */
proto.devserver.GetProgramRequest.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setPath(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.devserver.GetProgramRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.devserver.GetProgramRequest.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.devserver.GetProgramRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.devserver.GetProgramRequest.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined
  f = message.getPath()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
}

/**
 * optional string path = 1;
 * @return {string}
 */
proto.devserver.GetProgramRequest.prototype.getPath = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""))
}

/**
 * @param {string} value
 * @return {!proto.devserver.GetProgramRequest} returns this
 */
proto.devserver.GetProgramRequest.prototype.setPath = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.devserver.GetProgramResponse.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.devserver.GetProgramResponse.toObject(
      opt_includeInstance,
      this
    )
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.devserver.GetProgramResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.devserver.GetProgramResponse.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        program:
          (f = msg.getProgram()) &&
          proto.devserver.Program.toObject(includeInstance, f),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.devserver.GetProgramResponse}
 */
proto.devserver.GetProgramResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.devserver.GetProgramResponse()
  return proto.devserver.GetProgramResponse.deserializeBinaryFromReader(
    msg,
    reader
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.devserver.GetProgramResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.devserver.GetProgramResponse}
 */
proto.devserver.GetProgramResponse.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = new proto.devserver.Program()
        reader.readMessage(
          value,
          proto.devserver.Program.deserializeBinaryFromReader
        )
        msg.setProgram(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.devserver.GetProgramResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.devserver.GetProgramResponse.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.devserver.GetProgramResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.devserver.GetProgramResponse.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined
  f = message.getProgram()
  if (f != null) {
    writer.writeMessage(1, f, proto.devserver.Program.serializeBinaryToWriter)
  }
}

/**
 * optional Program Program = 1;
 * @return {?proto.devserver.Program}
 */
proto.devserver.GetProgramResponse.prototype.getProgram = function () {
  return /** @type{?proto.devserver.Program} */ (
    jspb.Message.getWrapperField(this, proto.devserver.Program, 1)
  )
}

/**
 * @param {?proto.devserver.Program|undefined} value
 * @return {!proto.devserver.GetProgramResponse} returns this
 */
proto.devserver.GetProgramResponse.prototype.setProgram = function (value) {
  return jspb.Message.setWrapperField(this, 1, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.devserver.GetProgramResponse} returns this
 */
proto.devserver.GetProgramResponse.prototype.clearProgram = function () {
  return this.setProgram(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.devserver.GetProgramResponse.prototype.hasProgram = function () {
  return jspb.Message.getField(this, 1) != null
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.devserver.UpdateProgramRequest.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.devserver.UpdateProgramRequest.toObject(
      opt_includeInstance,
      this
    )
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.devserver.UpdateProgramRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.devserver.UpdateProgramRequest.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        path: jspb.Message.getFieldWithDefault(msg, 1, ""),
        program:
          (f = msg.getProgram()) &&
          proto.devserver.Program.toObject(includeInstance, f),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.devserver.UpdateProgramRequest}
 */
proto.devserver.UpdateProgramRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.devserver.UpdateProgramRequest()
  return proto.devserver.UpdateProgramRequest.deserializeBinaryFromReader(
    msg,
    reader
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.devserver.UpdateProgramRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.devserver.UpdateProgramRequest}
 */
proto.devserver.UpdateProgramRequest.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setPath(value)
        break
      case 2:
        var value = new proto.devserver.Program()
        reader.readMessage(
          value,
          proto.devserver.Program.deserializeBinaryFromReader
        )
        msg.setProgram(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.devserver.UpdateProgramRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.devserver.UpdateProgramRequest.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.devserver.UpdateProgramRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.devserver.UpdateProgramRequest.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined
  f = message.getPath()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
  f = message.getProgram()
  if (f != null) {
    writer.writeMessage(2, f, proto.devserver.Program.serializeBinaryToWriter)
  }
}

/**
 * optional string path = 1;
 * @return {string}
 */
proto.devserver.UpdateProgramRequest.prototype.getPath = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""))
}

/**
 * @param {string} value
 * @return {!proto.devserver.UpdateProgramRequest} returns this
 */
proto.devserver.UpdateProgramRequest.prototype.setPath = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * optional Program Program = 2;
 * @return {?proto.devserver.Program}
 */
proto.devserver.UpdateProgramRequest.prototype.getProgram = function () {
  return /** @type{?proto.devserver.Program} */ (
    jspb.Message.getWrapperField(this, proto.devserver.Program, 2)
  )
}

/**
 * @param {?proto.devserver.Program|undefined} value
 * @return {!proto.devserver.UpdateProgramRequest} returns this
 */
proto.devserver.UpdateProgramRequest.prototype.setProgram = function (value) {
  return jspb.Message.setWrapperField(this, 2, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.devserver.UpdateProgramRequest} returns this
 */
proto.devserver.UpdateProgramRequest.prototype.clearProgram = function () {
  return this.setProgram(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.devserver.UpdateProgramRequest.prototype.hasProgram = function () {
  return jspb.Message.getField(this, 2) != null
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.devserver.UpdateProgramResponse.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.devserver.UpdateProgramResponse.toObject(
      opt_includeInstance,
      this
    )
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.devserver.UpdateProgramResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.devserver.UpdateProgramResponse.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {}

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.devserver.UpdateProgramResponse}
 */
proto.devserver.UpdateProgramResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.devserver.UpdateProgramResponse()
  return proto.devserver.UpdateProgramResponse.deserializeBinaryFromReader(
    msg,
    reader
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.devserver.UpdateProgramResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.devserver.UpdateProgramResponse}
 */
proto.devserver.UpdateProgramResponse.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.devserver.UpdateProgramResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.devserver.UpdateProgramResponse.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.devserver.UpdateProgramResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.devserver.UpdateProgramResponse.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.devserver.Program.prototype.toObject = function (opt_includeInstance) {
    return proto.devserver.Program.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.devserver.Program} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.devserver.Program.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        scopeMap: (f = msg.getScopeMap())
          ? f.toObject(includeInstance, proto.devserver.Component.toObject)
          : [],
        root: jspb.Message.getFieldWithDefault(msg, 2, ""),
        imports:
          (f = msg.getImports()) &&
          proto.devserver.ProgramImports.toObject(includeInstance, f),
        meta:
          (f = msg.getMeta()) &&
          proto.devserver.ProgramMeta.toObject(includeInstance, f),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.devserver.Program}
 */
proto.devserver.Program.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.devserver.Program()
  return proto.devserver.Program.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.devserver.Program} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.devserver.Program}
 */
proto.devserver.Program.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = msg.getScopeMap()
        reader.readMessage(value, function (message, reader) {
          jspb.Map.deserializeBinary(
            message,
            reader,
            jspb.BinaryReader.prototype.readString,
            jspb.BinaryReader.prototype.readMessage,
            proto.devserver.Component.deserializeBinaryFromReader,
            "",
            new proto.devserver.Component()
          )
        })
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setRoot(value)
        break
      case 3:
        var value = new proto.devserver.ProgramImports()
        reader.readMessage(
          value,
          proto.devserver.ProgramImports.deserializeBinaryFromReader
        )
        msg.setImports(value)
        break
      case 4:
        var value = new proto.devserver.ProgramMeta()
        reader.readMessage(
          value,
          proto.devserver.ProgramMeta.deserializeBinaryFromReader
        )
        msg.setMeta(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.devserver.Program.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.devserver.Program.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.devserver.Program} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.devserver.Program.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getScopeMap(true)
  if (f && f.getLength() > 0) {
    f.serializeBinary(
      1,
      writer,
      jspb.BinaryWriter.prototype.writeString,
      jspb.BinaryWriter.prototype.writeMessage,
      proto.devserver.Component.serializeBinaryToWriter
    )
  }
  f = message.getRoot()
  if (f.length > 0) {
    writer.writeString(2, f)
  }
  f = message.getImports()
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.devserver.ProgramImports.serializeBinaryToWriter
    )
  }
  f = message.getMeta()
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.devserver.ProgramMeta.serializeBinaryToWriter
    )
  }
}

/**
 * map<string, Component> scope = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.devserver.Component>}
 */
proto.devserver.Program.prototype.getScopeMap = function (opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.devserver.Component>} */ (
    jspb.Message.getMapField(
      this,
      1,
      opt_noLazyCreate,
      proto.devserver.Component
    )
  )
}

/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.devserver.Program} returns this
 */
proto.devserver.Program.prototype.clearScopeMap = function () {
  this.getScopeMap().clear()
  return this
}

/**
 * optional string root = 2;
 * @return {string}
 */
proto.devserver.Program.prototype.getRoot = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""))
}

/**
 * @param {string} value
 * @return {!proto.devserver.Program} returns this
 */
proto.devserver.Program.prototype.setRoot = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value)
}

/**
 * optional ProgramImports imports = 3;
 * @return {?proto.devserver.ProgramImports}
 */
proto.devserver.Program.prototype.getImports = function () {
  return /** @type{?proto.devserver.ProgramImports} */ (
    jspb.Message.getWrapperField(this, proto.devserver.ProgramImports, 3)
  )
}

/**
 * @param {?proto.devserver.ProgramImports|undefined} value
 * @return {!proto.devserver.Program} returns this
 */
proto.devserver.Program.prototype.setImports = function (value) {
  return jspb.Message.setWrapperField(this, 3, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.devserver.Program} returns this
 */
proto.devserver.Program.prototype.clearImports = function () {
  return this.setImports(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.devserver.Program.prototype.hasImports = function () {
  return jspb.Message.getField(this, 3) != null
}

/**
 * optional ProgramMeta meta = 4;
 * @return {?proto.devserver.ProgramMeta}
 */
proto.devserver.Program.prototype.getMeta = function () {
  return /** @type{?proto.devserver.ProgramMeta} */ (
    jspb.Message.getWrapperField(this, proto.devserver.ProgramMeta, 4)
  )
}

/**
 * @param {?proto.devserver.ProgramMeta|undefined} value
 * @return {!proto.devserver.Program} returns this
 */
proto.devserver.Program.prototype.setMeta = function (value) {
  return jspb.Message.setWrapperField(this, 4, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.devserver.Program} returns this
 */
proto.devserver.Program.prototype.clearMeta = function () {
  return this.setMeta(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.devserver.Program.prototype.hasMeta = function () {
  return jspb.Message.getField(this, 4) != null
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.devserver.ProgramMeta.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.devserver.ProgramMeta.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.devserver.ProgramMeta} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.devserver.ProgramMeta.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        compilerVersion: jspb.Message.getFieldWithDefault(msg, 1, ""),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.devserver.ProgramMeta}
 */
proto.devserver.ProgramMeta.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.devserver.ProgramMeta()
  return proto.devserver.ProgramMeta.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.devserver.ProgramMeta} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.devserver.ProgramMeta}
 */
proto.devserver.ProgramMeta.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setCompilerVersion(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.devserver.ProgramMeta.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.devserver.ProgramMeta.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.devserver.ProgramMeta} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.devserver.ProgramMeta.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined
  f = message.getCompilerVersion()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
}

/**
 * optional string compiler_version = 1;
 * @return {string}
 */
proto.devserver.ProgramMeta.prototype.getCompilerVersion = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""))
}

/**
 * @param {string} value
 * @return {!proto.devserver.ProgramMeta} returns this
 */
proto.devserver.ProgramMeta.prototype.setCompilerVersion = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.devserver.ProgramImports.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.devserver.ProgramImports.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.devserver.ProgramImports} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.devserver.ProgramImports.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        stdMap: (f = msg.getStdMap())
          ? f.toObject(includeInstance, undefined)
          : [],
        globalMap: (f = msg.getGlobalMap())
          ? f.toObject(includeInstance, undefined)
          : [],
        localMap: (f = msg.getLocalMap())
          ? f.toObject(includeInstance, undefined)
          : [],
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.devserver.ProgramImports}
 */
proto.devserver.ProgramImports.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.devserver.ProgramImports()
  return proto.devserver.ProgramImports.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.devserver.ProgramImports} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.devserver.ProgramImports}
 */
proto.devserver.ProgramImports.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = msg.getStdMap()
        reader.readMessage(value, function (message, reader) {
          jspb.Map.deserializeBinary(
            message,
            reader,
            jspb.BinaryReader.prototype.readString,
            jspb.BinaryReader.prototype.readString,
            null,
            "",
            ""
          )
        })
        break
      case 2:
        var value = msg.getGlobalMap()
        reader.readMessage(value, function (message, reader) {
          jspb.Map.deserializeBinary(
            message,
            reader,
            jspb.BinaryReader.prototype.readString,
            jspb.BinaryReader.prototype.readString,
            null,
            "",
            ""
          )
        })
        break
      case 3:
        var value = msg.getLocalMap()
        reader.readMessage(value, function (message, reader) {
          jspb.Map.deserializeBinary(
            message,
            reader,
            jspb.BinaryReader.prototype.readString,
            jspb.BinaryReader.prototype.readString,
            null,
            "",
            ""
          )
        })
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.devserver.ProgramImports.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.devserver.ProgramImports.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.devserver.ProgramImports} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.devserver.ProgramImports.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined
  f = message.getStdMap(true)
  if (f && f.getLength() > 0) {
    f.serializeBinary(
      1,
      writer,
      jspb.BinaryWriter.prototype.writeString,
      jspb.BinaryWriter.prototype.writeString
    )
  }
  f = message.getGlobalMap(true)
  if (f && f.getLength() > 0) {
    f.serializeBinary(
      2,
      writer,
      jspb.BinaryWriter.prototype.writeString,
      jspb.BinaryWriter.prototype.writeString
    )
  }
  f = message.getLocalMap(true)
  if (f && f.getLength() > 0) {
    f.serializeBinary(
      3,
      writer,
      jspb.BinaryWriter.prototype.writeString,
      jspb.BinaryWriter.prototype.writeString
    )
  }
}

/**
 * map<string, string> std = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.devserver.ProgramImports.prototype.getStdMap = function (
  opt_noLazyCreate
) {
  return /** @type {!jspb.Map<string,string>} */ (
    jspb.Message.getMapField(this, 1, opt_noLazyCreate, null)
  )
}

/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.devserver.ProgramImports} returns this
 */
proto.devserver.ProgramImports.prototype.clearStdMap = function () {
  this.getStdMap().clear()
  return this
}

/**
 * map<string, string> global = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.devserver.ProgramImports.prototype.getGlobalMap = function (
  opt_noLazyCreate
) {
  return /** @type {!jspb.Map<string,string>} */ (
    jspb.Message.getMapField(this, 2, opt_noLazyCreate, null)
  )
}

/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.devserver.ProgramImports} returns this
 */
proto.devserver.ProgramImports.prototype.clearGlobalMap = function () {
  this.getGlobalMap().clear()
  return this
}

/**
 * map<string, string> local = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.devserver.ProgramImports.prototype.getLocalMap = function (
  opt_noLazyCreate
) {
  return /** @type {!jspb.Map<string,string>} */ (
    jspb.Message.getMapField(this, 3, opt_noLazyCreate, null)
  )
}

/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.devserver.ProgramImports} returns this
 */
proto.devserver.ProgramImports.prototype.clearLocalMap = function () {
  this.getLocalMap().clear()
  return this
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.devserver.Component.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.devserver.Component.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.devserver.Component} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.devserver.Component.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        type: jspb.Message.getFieldWithDefault(msg, 1, 0),
        operator:
          (f = msg.getOperator()) &&
          proto.devserver.Operator.toObject(includeInstance, f),
        module:
          (f = msg.getModule()) &&
          proto.devserver.Module.toObject(includeInstance, f),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.devserver.Component}
 */
proto.devserver.Component.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.devserver.Component()
  return proto.devserver.Component.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.devserver.Component} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.devserver.Component}
 */
proto.devserver.Component.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {!proto.devserver.ComponentType} */ (
          reader.readEnum()
        )
        msg.setType(value)
        break
      case 2:
        var value = new proto.devserver.Operator()
        reader.readMessage(
          value,
          proto.devserver.Operator.deserializeBinaryFromReader
        )
        msg.setOperator(value)
        break
      case 3:
        var value = new proto.devserver.Module()
        reader.readMessage(
          value,
          proto.devserver.Module.deserializeBinaryFromReader
        )
        msg.setModule(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.devserver.Component.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.devserver.Component.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.devserver.Component} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.devserver.Component.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getType()
  if (f !== 0.0) {
    writer.writeEnum(1, f)
  }
  f = message.getOperator()
  if (f != null) {
    writer.writeMessage(2, f, proto.devserver.Operator.serializeBinaryToWriter)
  }
  f = message.getModule()
  if (f != null) {
    writer.writeMessage(3, f, proto.devserver.Module.serializeBinaryToWriter)
  }
}

/**
 * optional ComponentType type = 1;
 * @return {!proto.devserver.ComponentType}
 */
proto.devserver.Component.prototype.getType = function () {
  return /** @type {!proto.devserver.ComponentType} */ (
    jspb.Message.getFieldWithDefault(this, 1, 0)
  )
}

/**
 * @param {!proto.devserver.ComponentType} value
 * @return {!proto.devserver.Component} returns this
 */
proto.devserver.Component.prototype.setType = function (value) {
  return jspb.Message.setProto3EnumField(this, 1, value)
}

/**
 * optional Operator operator = 2;
 * @return {?proto.devserver.Operator}
 */
proto.devserver.Component.prototype.getOperator = function () {
  return /** @type{?proto.devserver.Operator} */ (
    jspb.Message.getWrapperField(this, proto.devserver.Operator, 2)
  )
}

/**
 * @param {?proto.devserver.Operator|undefined} value
 * @return {!proto.devserver.Component} returns this
 */
proto.devserver.Component.prototype.setOperator = function (value) {
  return jspb.Message.setWrapperField(this, 2, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.devserver.Component} returns this
 */
proto.devserver.Component.prototype.clearOperator = function () {
  return this.setOperator(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.devserver.Component.prototype.hasOperator = function () {
  return jspb.Message.getField(this, 2) != null
}

/**
 * optional Module module = 3;
 * @return {?proto.devserver.Module}
 */
proto.devserver.Component.prototype.getModule = function () {
  return /** @type{?proto.devserver.Module} */ (
    jspb.Message.getWrapperField(this, proto.devserver.Module, 3)
  )
}

/**
 * @param {?proto.devserver.Module|undefined} value
 * @return {!proto.devserver.Component} returns this
 */
proto.devserver.Component.prototype.setModule = function (value) {
  return jspb.Message.setWrapperField(this, 3, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.devserver.Component} returns this
 */
proto.devserver.Component.prototype.clearModule = function () {
  return this.setModule(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.devserver.Component.prototype.hasModule = function () {
  return jspb.Message.getField(this, 3) != null
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.devserver.Operator.prototype.toObject = function (opt_includeInstance) {
    return proto.devserver.Operator.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.devserver.Operator} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.devserver.Operator.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        io:
          (f = msg.getIo()) &&
          proto.devserver.ComponentIO.toObject(includeInstance, f),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.devserver.Operator}
 */
proto.devserver.Operator.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.devserver.Operator()
  return proto.devserver.Operator.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.devserver.Operator} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.devserver.Operator}
 */
proto.devserver.Operator.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = new proto.devserver.ComponentIO()
        reader.readMessage(
          value,
          proto.devserver.ComponentIO.deserializeBinaryFromReader
        )
        msg.setIo(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.devserver.Operator.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.devserver.Operator.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.devserver.Operator} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.devserver.Operator.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getIo()
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.devserver.ComponentIO.serializeBinaryToWriter
    )
  }
}

/**
 * optional ComponentIO io = 1;
 * @return {?proto.devserver.ComponentIO}
 */
proto.devserver.Operator.prototype.getIo = function () {
  return /** @type{?proto.devserver.ComponentIO} */ (
    jspb.Message.getWrapperField(this, proto.devserver.ComponentIO, 1)
  )
}

/**
 * @param {?proto.devserver.ComponentIO|undefined} value
 * @return {!proto.devserver.Operator} returns this
 */
proto.devserver.Operator.prototype.setIo = function (value) {
  return jspb.Message.setWrapperField(this, 1, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.devserver.Operator} returns this
 */
proto.devserver.Operator.prototype.clearIo = function () {
  return this.setIo(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.devserver.Operator.prototype.hasIo = function () {
  return jspb.Message.getField(this, 1) != null
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.devserver.Module.repeatedFields_ = [4]

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.devserver.Module.prototype.toObject = function (opt_includeInstance) {
    return proto.devserver.Module.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.devserver.Module} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.devserver.Module.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        io:
          (f = msg.getIo()) &&
          proto.devserver.ComponentIO.toObject(includeInstance, f),
        depsMap: (f = msg.getDepsMap())
          ? f.toObject(includeInstance, proto.devserver.ComponentIO.toObject)
          : [],
        workersMap: (f = msg.getWorkersMap())
          ? f.toObject(includeInstance, undefined)
          : [],
        netList: jspb.Message.toObjectList(
          msg.getNetList(),
          proto.devserver.ModuleConnection.toObject,
          includeInstance
        ),
        constMap: (f = msg.getConstMap())
          ? f.toObject(includeInstance, proto.devserver.ModuleConst.toObject)
          : [],
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.devserver.Module}
 */
proto.devserver.Module.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.devserver.Module()
  return proto.devserver.Module.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.devserver.Module} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.devserver.Module}
 */
proto.devserver.Module.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = new proto.devserver.ComponentIO()
        reader.readMessage(
          value,
          proto.devserver.ComponentIO.deserializeBinaryFromReader
        )
        msg.setIo(value)
        break
      case 2:
        var value = msg.getDepsMap()
        reader.readMessage(value, function (message, reader) {
          jspb.Map.deserializeBinary(
            message,
            reader,
            jspb.BinaryReader.prototype.readString,
            jspb.BinaryReader.prototype.readMessage,
            proto.devserver.ComponentIO.deserializeBinaryFromReader,
            "",
            new proto.devserver.ComponentIO()
          )
        })
        break
      case 3:
        var value = msg.getWorkersMap()
        reader.readMessage(value, function (message, reader) {
          jspb.Map.deserializeBinary(
            message,
            reader,
            jspb.BinaryReader.prototype.readString,
            jspb.BinaryReader.prototype.readString,
            null,
            "",
            ""
          )
        })
        break
      case 4:
        var value = new proto.devserver.ModuleConnection()
        reader.readMessage(
          value,
          proto.devserver.ModuleConnection.deserializeBinaryFromReader
        )
        msg.addNet(value)
        break
      case 5:
        var value = msg.getConstMap()
        reader.readMessage(value, function (message, reader) {
          jspb.Map.deserializeBinary(
            message,
            reader,
            jspb.BinaryReader.prototype.readString,
            jspb.BinaryReader.prototype.readMessage,
            proto.devserver.ModuleConst.deserializeBinaryFromReader,
            "",
            new proto.devserver.ModuleConst()
          )
        })
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.devserver.Module.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.devserver.Module.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.devserver.Module} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.devserver.Module.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getIo()
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.devserver.ComponentIO.serializeBinaryToWriter
    )
  }
  f = message.getDepsMap(true)
  if (f && f.getLength() > 0) {
    f.serializeBinary(
      2,
      writer,
      jspb.BinaryWriter.prototype.writeString,
      jspb.BinaryWriter.prototype.writeMessage,
      proto.devserver.ComponentIO.serializeBinaryToWriter
    )
  }
  f = message.getWorkersMap(true)
  if (f && f.getLength() > 0) {
    f.serializeBinary(
      3,
      writer,
      jspb.BinaryWriter.prototype.writeString,
      jspb.BinaryWriter.prototype.writeString
    )
  }
  f = message.getNetList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.devserver.ModuleConnection.serializeBinaryToWriter
    )
  }
  f = message.getConstMap(true)
  if (f && f.getLength() > 0) {
    f.serializeBinary(
      5,
      writer,
      jspb.BinaryWriter.prototype.writeString,
      jspb.BinaryWriter.prototype.writeMessage,
      proto.devserver.ModuleConst.serializeBinaryToWriter
    )
  }
}

/**
 * optional ComponentIO io = 1;
 * @return {?proto.devserver.ComponentIO}
 */
proto.devserver.Module.prototype.getIo = function () {
  return /** @type{?proto.devserver.ComponentIO} */ (
    jspb.Message.getWrapperField(this, proto.devserver.ComponentIO, 1)
  )
}

/**
 * @param {?proto.devserver.ComponentIO|undefined} value
 * @return {!proto.devserver.Module} returns this
 */
proto.devserver.Module.prototype.setIo = function (value) {
  return jspb.Message.setWrapperField(this, 1, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.devserver.Module} returns this
 */
proto.devserver.Module.prototype.clearIo = function () {
  return this.setIo(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.devserver.Module.prototype.hasIo = function () {
  return jspb.Message.getField(this, 1) != null
}

/**
 * map<string, ComponentIO> deps = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.devserver.ComponentIO>}
 */
proto.devserver.Module.prototype.getDepsMap = function (opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.devserver.ComponentIO>} */ (
    jspb.Message.getMapField(
      this,
      2,
      opt_noLazyCreate,
      proto.devserver.ComponentIO
    )
  )
}

/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.devserver.Module} returns this
 */
proto.devserver.Module.prototype.clearDepsMap = function () {
  this.getDepsMap().clear()
  return this
}

/**
 * map<string, string> workers = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.devserver.Module.prototype.getWorkersMap = function (opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
    jspb.Message.getMapField(this, 3, opt_noLazyCreate, null)
  )
}

/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.devserver.Module} returns this
 */
proto.devserver.Module.prototype.clearWorkersMap = function () {
  this.getWorkersMap().clear()
  return this
}

/**
 * repeated ModuleConnection net = 4;
 * @return {!Array<!proto.devserver.ModuleConnection>}
 */
proto.devserver.Module.prototype.getNetList = function () {
  return /** @type{!Array<!proto.devserver.ModuleConnection>} */ (
    jspb.Message.getRepeatedWrapperField(
      this,
      proto.devserver.ModuleConnection,
      4
    )
  )
}

/**
 * @param {!Array<!proto.devserver.ModuleConnection>} value
 * @return {!proto.devserver.Module} returns this
 */
proto.devserver.Module.prototype.setNetList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value)
}

/**
 * @param {!proto.devserver.ModuleConnection=} opt_value
 * @param {number=} opt_index
 * @return {!proto.devserver.ModuleConnection}
 */
proto.devserver.Module.prototype.addNet = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    4,
    opt_value,
    proto.devserver.ModuleConnection,
    opt_index
  )
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.devserver.Module} returns this
 */
proto.devserver.Module.prototype.clearNetList = function () {
  return this.setNetList([])
}

/**
 * map<string, ModuleConst> const = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.devserver.ModuleConst>}
 */
proto.devserver.Module.prototype.getConstMap = function (opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.devserver.ModuleConst>} */ (
    jspb.Message.getMapField(
      this,
      5,
      opt_noLazyCreate,
      proto.devserver.ModuleConst
    )
  )
}

/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.devserver.Module} returns this
 */
proto.devserver.Module.prototype.clearConstMap = function () {
  this.getConstMap().clear()
  return this
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.devserver.ModuleConst.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.devserver.ModuleConst.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.devserver.ModuleConst} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.devserver.ModuleConst.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        type: jspb.Message.getFieldWithDefault(msg, 1, 0),
        intValue: jspb.Message.getFieldWithDefault(msg, 2, 0),
        strValue: jspb.Message.getFieldWithDefault(msg, 3, ""),
        boolValue: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.devserver.ModuleConst}
 */
proto.devserver.ModuleConst.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.devserver.ModuleConst()
  return proto.devserver.ModuleConst.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.devserver.ModuleConst} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.devserver.ModuleConst}
 */
proto.devserver.ModuleConst.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {!proto.devserver.ValueType} */ (
          reader.readEnum()
        )
        msg.setType(value)
        break
      case 2:
        var value = /** @type {number} */ (reader.readInt64())
        msg.setIntValue(value)
        break
      case 3:
        var value = /** @type {string} */ (reader.readString())
        msg.setStrValue(value)
        break
      case 4:
        var value = /** @type {boolean} */ (reader.readBool())
        msg.setBoolValue(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.devserver.ModuleConst.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.devserver.ModuleConst.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.devserver.ModuleConst} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.devserver.ModuleConst.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined
  f = message.getType()
  if (f !== 0.0) {
    writer.writeEnum(1, f)
  }
  f = message.getIntValue()
  if (f !== 0) {
    writer.writeInt64(2, f)
  }
  f = message.getStrValue()
  if (f.length > 0) {
    writer.writeString(3, f)
  }
  f = message.getBoolValue()
  if (f) {
    writer.writeBool(4, f)
  }
}

/**
 * optional ValueType type = 1;
 * @return {!proto.devserver.ValueType}
 */
proto.devserver.ModuleConst.prototype.getType = function () {
  return /** @type {!proto.devserver.ValueType} */ (
    jspb.Message.getFieldWithDefault(this, 1, 0)
  )
}

/**
 * @param {!proto.devserver.ValueType} value
 * @return {!proto.devserver.ModuleConst} returns this
 */
proto.devserver.ModuleConst.prototype.setType = function (value) {
  return jspb.Message.setProto3EnumField(this, 1, value)
}

/**
 * optional int64 int_value = 2;
 * @return {number}
 */
proto.devserver.ModuleConst.prototype.getIntValue = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0))
}

/**
 * @param {number} value
 * @return {!proto.devserver.ModuleConst} returns this
 */
proto.devserver.ModuleConst.prototype.setIntValue = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value)
}

/**
 * optional string str_value = 3;
 * @return {string}
 */
proto.devserver.ModuleConst.prototype.getStrValue = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""))
}

/**
 * @param {string} value
 * @return {!proto.devserver.ModuleConst} returns this
 */
proto.devserver.ModuleConst.prototype.setStrValue = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value)
}

/**
 * optional bool bool_value = 4;
 * @return {boolean}
 */
proto.devserver.ModuleConst.prototype.getBoolValue = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 4, false)
  )
}

/**
 * @param {boolean} value
 * @return {!proto.devserver.ModuleConst} returns this
 */
proto.devserver.ModuleConst.prototype.setBoolValue = function (value) {
  return jspb.Message.setProto3BooleanField(this, 4, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.devserver.ModuleConnection.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.devserver.ModuleConnection.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.devserver.ModuleConnection} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.devserver.ModuleConnection.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        from:
          (f = msg.getFrom()) &&
          proto.devserver.ConnectionAddr.toObject(includeInstance, f),
        to:
          (f = msg.getTo()) &&
          proto.devserver.ConnectionAddr.toObject(includeInstance, f),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.devserver.ModuleConnection}
 */
proto.devserver.ModuleConnection.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.devserver.ModuleConnection()
  return proto.devserver.ModuleConnection.deserializeBinaryFromReader(
    msg,
    reader
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.devserver.ModuleConnection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.devserver.ModuleConnection}
 */
proto.devserver.ModuleConnection.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = new proto.devserver.ConnectionAddr()
        reader.readMessage(
          value,
          proto.devserver.ConnectionAddr.deserializeBinaryFromReader
        )
        msg.setFrom(value)
        break
      case 2:
        var value = new proto.devserver.ConnectionAddr()
        reader.readMessage(
          value,
          proto.devserver.ConnectionAddr.deserializeBinaryFromReader
        )
        msg.setTo(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.devserver.ModuleConnection.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.devserver.ModuleConnection.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.devserver.ModuleConnection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.devserver.ModuleConnection.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined
  f = message.getFrom()
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.devserver.ConnectionAddr.serializeBinaryToWriter
    )
  }
  f = message.getTo()
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.devserver.ConnectionAddr.serializeBinaryToWriter
    )
  }
}

/**
 * optional ConnectionAddr from = 1;
 * @return {?proto.devserver.ConnectionAddr}
 */
proto.devserver.ModuleConnection.prototype.getFrom = function () {
  return /** @type{?proto.devserver.ConnectionAddr} */ (
    jspb.Message.getWrapperField(this, proto.devserver.ConnectionAddr, 1)
  )
}

/**
 * @param {?proto.devserver.ConnectionAddr|undefined} value
 * @return {!proto.devserver.ModuleConnection} returns this
 */
proto.devserver.ModuleConnection.prototype.setFrom = function (value) {
  return jspb.Message.setWrapperField(this, 1, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.devserver.ModuleConnection} returns this
 */
proto.devserver.ModuleConnection.prototype.clearFrom = function () {
  return this.setFrom(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.devserver.ModuleConnection.prototype.hasFrom = function () {
  return jspb.Message.getField(this, 1) != null
}

/**
 * optional ConnectionAddr to = 2;
 * @return {?proto.devserver.ConnectionAddr}
 */
proto.devserver.ModuleConnection.prototype.getTo = function () {
  return /** @type{?proto.devserver.ConnectionAddr} */ (
    jspb.Message.getWrapperField(this, proto.devserver.ConnectionAddr, 2)
  )
}

/**
 * @param {?proto.devserver.ConnectionAddr|undefined} value
 * @return {!proto.devserver.ModuleConnection} returns this
 */
proto.devserver.ModuleConnection.prototype.setTo = function (value) {
  return jspb.Message.setWrapperField(this, 2, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.devserver.ModuleConnection} returns this
 */
proto.devserver.ModuleConnection.prototype.clearTo = function () {
  return this.setTo(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.devserver.ModuleConnection.prototype.hasTo = function () {
  return jspb.Message.getField(this, 2) != null
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.devserver.ConnectionAddr.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.devserver.ConnectionAddr.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.devserver.ConnectionAddr} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.devserver.ConnectionAddr.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        node: jspb.Message.getFieldWithDefault(msg, 1, ""),
        port: jspb.Message.getFieldWithDefault(msg, 2, ""),
        idx: jspb.Message.getFieldWithDefault(msg, 3, ""),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.devserver.ConnectionAddr}
 */
proto.devserver.ConnectionAddr.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.devserver.ConnectionAddr()
  return proto.devserver.ConnectionAddr.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.devserver.ConnectionAddr} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.devserver.ConnectionAddr}
 */
proto.devserver.ConnectionAddr.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setNode(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setPort(value)
        break
      case 3:
        var value = /** @type {string} */ (reader.readString())
        msg.setIdx(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.devserver.ConnectionAddr.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.devserver.ConnectionAddr.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.devserver.ConnectionAddr} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.devserver.ConnectionAddr.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined
  f = message.getNode()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
  f = message.getPort()
  if (f.length > 0) {
    writer.writeString(2, f)
  }
  f = message.getIdx()
  if (f.length > 0) {
    writer.writeString(3, f)
  }
}

/**
 * optional string node = 1;
 * @return {string}
 */
proto.devserver.ConnectionAddr.prototype.getNode = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""))
}

/**
 * @param {string} value
 * @return {!proto.devserver.ConnectionAddr} returns this
 */
proto.devserver.ConnectionAddr.prototype.setNode = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * optional string port = 2;
 * @return {string}
 */
proto.devserver.ConnectionAddr.prototype.getPort = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""))
}

/**
 * @param {string} value
 * @return {!proto.devserver.ConnectionAddr} returns this
 */
proto.devserver.ConnectionAddr.prototype.setPort = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value)
}

/**
 * optional string idx = 3;
 * @return {string}
 */
proto.devserver.ConnectionAddr.prototype.getIdx = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""))
}

/**
 * @param {string} value
 * @return {!proto.devserver.ConnectionAddr} returns this
 */
proto.devserver.ConnectionAddr.prototype.setIdx = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.devserver.ComponentIO.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.devserver.ComponentIO.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.devserver.ComponentIO} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.devserver.ComponentIO.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        inMap: (f = msg.getInMap())
          ? f.toObject(includeInstance, proto.devserver.Port.toObject)
          : [],
        outMap: (f = msg.getOutMap())
          ? f.toObject(includeInstance, proto.devserver.Port.toObject)
          : [],
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.devserver.ComponentIO}
 */
proto.devserver.ComponentIO.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.devserver.ComponentIO()
  return proto.devserver.ComponentIO.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.devserver.ComponentIO} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.devserver.ComponentIO}
 */
proto.devserver.ComponentIO.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = msg.getInMap()
        reader.readMessage(value, function (message, reader) {
          jspb.Map.deserializeBinary(
            message,
            reader,
            jspb.BinaryReader.prototype.readString,
            jspb.BinaryReader.prototype.readMessage,
            proto.devserver.Port.deserializeBinaryFromReader,
            "",
            new proto.devserver.SinglePort()
          )
        })
        break
      case 2:
        var value = msg.getOutMap()
        reader.readMessage(value, function (message, reader) {
          jspb.Map.deserializeBinary(
            message,
            reader,
            jspb.BinaryReader.prototype.readString,
            jspb.BinaryReader.prototype.readMessage,
            proto.devserver.Port.deserializeBinaryFromReader,
            "",
            new proto.devserver.SinglePort()
          )
        })
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.devserver.ComponentIO.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.devserver.ComponentIO.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.devserver.ComponentIO} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.devserver.ComponentIO.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined
  f = message.getInMap(true)
  if (f && f.getLength() > 0) {
    f.serializeBinary(
      1,
      writer,
      jspb.BinaryWriter.prototype.writeString,
      jspb.BinaryWriter.prototype.writeMessage,
      proto.devserver.Port.serializeBinaryToWriter
    )
  }
  f = message.getOutMap(true)
  if (f && f.getLength() > 0) {
    f.serializeBinary(
      2,
      writer,
      jspb.BinaryWriter.prototype.writeString,
      jspb.BinaryWriter.prototype.writeMessage,
      proto.devserver.Port.serializeBinaryToWriter
    )
  }
}

/**
 * map<string, Port> in = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.devserver.Port>}
 */
proto.devserver.ComponentIO.prototype.getInMap = function (opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.devserver.Port>} */ (
    jspb.Message.getMapField(this, 1, opt_noLazyCreate, proto.devserver.Port)
  )
}

/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.devserver.ComponentIO} returns this
 */
proto.devserver.ComponentIO.prototype.clearInMap = function () {
  this.getInMap().clear()
  return this
}

/**
 * map<string, Port> out = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.devserver.Port>}
 */
proto.devserver.ComponentIO.prototype.getOutMap = function (opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.devserver.Port>} */ (
    jspb.Message.getMapField(this, 2, opt_noLazyCreate, proto.devserver.Port)
  )
}

/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.devserver.ComponentIO} returns this
 */
proto.devserver.ComponentIO.prototype.clearOutMap = function () {
  this.getOutMap().clear()
  return this
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.devserver.Port.prototype.toObject = function (opt_includeInstance) {
    return proto.devserver.Port.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.devserver.Port} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.devserver.Port.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        isArray: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
        type: jspb.Message.getFieldWithDefault(msg, 2, 0),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.devserver.Port}
 */
proto.devserver.Port.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.devserver.Port()
  return proto.devserver.Port.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.devserver.Port} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.devserver.Port}
 */
proto.devserver.Port.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {boolean} */ (reader.readBool())
        msg.setIsArray(value)
        break
      case 2:
        var value = /** @type {!proto.devserver.ValueType} */ (
          reader.readEnum()
        )
        msg.setType(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.devserver.Port.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.devserver.Port.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.devserver.Port} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.devserver.Port.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getIsArray()
  if (f) {
    writer.writeBool(1, f)
  }
  f = message.getType()
  if (f !== 0.0) {
    writer.writeEnum(2, f)
  }
}

/**
 * optional bool is_array = 1;
 * @return {boolean}
 */
proto.devserver.Port.prototype.getIsArray = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 1, false)
  )
}

/**
 * @param {boolean} value
 * @return {!proto.devserver.Port} returns this
 */
proto.devserver.Port.prototype.setIsArray = function (value) {
  return jspb.Message.setProto3BooleanField(this, 1, value)
}

/**
 * optional ValueType type = 2;
 * @return {!proto.devserver.ValueType}
 */
proto.devserver.Port.prototype.getType = function () {
  return /** @type {!proto.devserver.ValueType} */ (
    jspb.Message.getFieldWithDefault(this, 2, 0)
  )
}

/**
 * @param {!proto.devserver.ValueType} value
 * @return {!proto.devserver.Port} returns this
 */
proto.devserver.Port.prototype.setType = function (value) {
  return jspb.Message.setProto3EnumField(this, 2, value)
}

/**
 * @enum {number}
 */
proto.devserver.ComponentType = {
  COMPONENT_TYPE_OPERATOR: 0,
  COMPONENT_TYPE_MODULE: 1,
}

/**
 * @enum {number}
 */
proto.devserver.ValueType = {
  VALUE_TYPE_INT: 0,
  VALUE_TYPE_STR: 1,
  VALUE_TYPE_BOOL: 2,
}

goog.object.extend(exports, proto.devserver)
