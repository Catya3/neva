/* tslint:disable */
/* eslint-disable */
/**
 * API Title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * @type Component
 * @export
 */
export type Component = Module | Operator;

/**
 * 
 * @export
 * @interface Connection
 */
export interface Connection {
    /**
     * 
     * @type {PortAddr}
     * @memberof Connection
     */
    'from'?: PortAddr;
    /**
     * 
     * @type {PortAddr}
     * @memberof Connection
     */
    'to'?: PortAddr;
}
/**
 * 
 * @export
 * @interface Const
 */
export interface Const {
    /**
     * 
     * @type {string}
     * @memberof Const
     */
    'type'?: string;
    /**
     * 
     * @type {number}
     * @memberof Const
     */
    'value'?: number;
}
/**
 * 
 * @export
 * @interface IO
 */
export interface IO {
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof IO
     */
    'in'?: { [key: string]: string; };
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof IO
     */
    'out'?: { [key: string]: string; };
}
/**
 * 
 * @export
 * @interface Module
 */
export interface Module {
    /**
     * 
     * @type {IO}
     * @memberof Module
     */
    'io'?: IO;
    /**
     * 
     * @type {{ [key: string]: IO; }}
     * @memberof Module
     */
    'deps'?: { [key: string]: IO; };
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof Module
     */
    'workers'?: { [key: string]: string; };
    /**
     * 
     * @type {{ [key: string]: Const; }}
     * @memberof Module
     */
    'const'?: { [key: string]: Const; };
    /**
     * 
     * @type {Array<Connection>}
     * @memberof Module
     */
    'net'?: Array<Connection>;
}
/**
 * 
 * @export
 * @interface Operator
 */
export interface Operator {
    /**
     * 
     * @type {IO}
     * @memberof Operator
     */
    'io'?: IO;
}
/**
 * 
 * @export
 * @interface PortAddr
 */
export interface PortAddr {
    /**
     * 
     * @type {string}
     * @memberof PortAddr
     */
    'node'?: string;
    /**
     * 
     * @type {number}
     * @memberof PortAddr
     */
    'idx'?: number;
    /**
     * 
     * @type {string}
     * @memberof PortAddr
     */
    'port'?: string;
}
/**
 * 
 * @export
 * @interface Program
 */
export interface Program {
    /**
     * 
     * @type {{ [key: string]: Component; }}
     * @memberof Program
     */
    'scope'?: { [key: string]: Component; };
    /**
     * 
     * @type {string}
     * @memberof Program
     */
    'root'?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} path 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        programGet: async (path: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'path' is not null or undefined
            assertParamExists('programGet', 'path', path)
            const localVarPath = `/program`
                .replace(`{${"path"}}`, encodeURIComponent(String(path)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} path 
         * @param {Program} program 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        programPatch: async (path: string, program: Program, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'path' is not null or undefined
            assertParamExists('programPatch', 'path', path)
            // verify required parameter 'program' is not null or undefined
            assertParamExists('programPatch', 'program', program)
            const localVarPath = `/program`
                .replace(`{${"path"}}`, encodeURIComponent(String(path)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(program, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} path 
         * @param {Program} program 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        programPost: async (path: string, program: Program, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'path' is not null or undefined
            assertParamExists('programPost', 'path', path)
            // verify required parameter 'program' is not null or undefined
            assertParamExists('programPost', 'program', program)
            const localVarPath = `/program`
                .replace(`{${"path"}}`, encodeURIComponent(String(path)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(program, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} path 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async programGet(path: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Program>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.programGet(path, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} path 
         * @param {Program} program 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async programPatch(path: string, program: Program, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Program>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.programPatch(path, program, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} path 
         * @param {Program} program 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async programPost(path: string, program: Program, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Program>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.programPost(path, program, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {string} path 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        programGet(path: string, options?: any): AxiosPromise<Program> {
            return localVarFp.programGet(path, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} path 
         * @param {Program} program 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        programPatch(path: string, program: Program, options?: any): AxiosPromise<Program> {
            return localVarFp.programPatch(path, program, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} path 
         * @param {Program} program 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        programPost(path: string, program: Program, options?: any): AxiosPromise<Program> {
            return localVarFp.programPost(path, program, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {string} path 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public programGet(path: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).programGet(path, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} path 
     * @param {Program} program 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public programPatch(path: string, program: Program, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).programPatch(path, program, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} path 
     * @param {Program} program 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public programPost(path: string, program: Program, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).programPost(path, program, options).then((request) => request(this.axios, this.basePath));
    }
}


