// StreamPort iterates over all array-inport's slots in order
// and produces a stream of messages.
#extern(array_port_to_stream)
pub component StreamPort<T>([port] T) (seq stream<T>)

// IPortReducer reduces a stream of messages to one single message.
// It's expected to send a result message after every processed stream.
pub interface IPortReducer<T>(seq stream<T>) (res T)

// ReducePort reduces messages from multiple connections to a single message.
// It iterates over all array-inport's slots in order and streams every message
// to reducer. When all messages are processed the result is emited to outport.
pub component ReducePort<T>([port] T) (res T) {
    nodes { reducer IPortReducer<T>, streamer StreamPort<T> }
    net {
        :port => streamer:port
        streamer -> reducer -> :res
    }
}

// === For ===

pub interface IForHandler<T>(data stream<T>) (sig any)

pub component For<T>(item stream<T>) (sig any) {
    nodes {
        IForHandler<T>
        Lock<T>
        Match<bool>
        idx Field<int>
        data Field<T>
        last Field<bool>
    }
    net {
        :item -> [
            lock:data,
            idx, data, last
        ]

        :item.data -> iForHandler:data
        :item.idx -> iForHandler:idx
        :item.last -> iForHandler:last

        iForHandler:done -> lock:sig

        lock:data.last -> match:data
        true -> match[0] -> :done
    }
}