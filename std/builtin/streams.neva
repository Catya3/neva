// StreamPort iterates over all array-inport's slots in order
// and produces a stream of messages.
#extern(array_port_to_stream)
pub component StreamPort<T>([port] T) (seq stream<T>)

// IPortReducer reduces a stream of messages to one single message.
// It's expected to send a result message after every processed stream.
pub interface IPortReducer<T>(seq stream<T>) (res T)

// ReducePort reduces messages from multiple connections to a single message.
// It iterates over all array-inport's slots in order and streams every message
// to reducer. When all messages are processed the result is emited to outport.
pub component ReducePort<T>([port] T) (res T) {
    nodes { reducer IPortReducer<T>, streamer StreamPort<T> }
    :port => streamer:port
    streamer -> reducer -> :res
}

// === FOR ===

pub interface IForHandler<T>(data T) (sig any) 

const dataPath list<string> = ['data']
const lastPath list<string> = ['last']

pub component For<T>(item stream<T>) (sig any) {
    nodes {
        Lock<bool>
        handler IForHandler

        #bind(lastPath)
        getLast Field<bool>

        #bind(dataPath)
        getData Field<T>

        Match<bool>
    }

    :item -> [getLast, getData]
    getLast -> lock:data
    getData -> handler

    handler -> lock:sig

    lock:data -> match:data
    true -> match:case[0] -> :sig
}