// Core

component {
    #extern(emitter)
    pub Emitter<T>() (msg T)

    #extern(destructor)
    pub Destructor(msg any) ()

    #extern(blocker)
    pub Blocker<T>(sig any, data T) (data T)

    #autoports
    #extern(struct_builder)
    pub StructBuilder<T struct {}> () (msg T)

    #extern(struct_selector)
    pub StructSelector<T>(msg struct {}) (msg T)
}

// Math

#extern(int int_adder, float float_adder, string string_adder)
pub component Adder<T int | float | string>(stream maybe<T>) (res T)

#extern(int int_subtractor, float float_subtractor)
pub component Subtractor<T int | float >(stream maybe<T>) (res T)

#extern(int int_multiplier, float float_multiplier)
pub component Multiplier<T int | float >(stream maybe<T>) (res T)

#extern(int int_decrementor, float float_decrementor)
pub component Decrementor<T int | float>(data T) (res T)

// IO

#extern(line_printer)
pub component Printer<T>(data T) (sig T)

#extern(line_fprinter)
pub component FPrinter<T>(tpl string, [args] T) ([args] T, err error)

// Logic

#extern(match)
pub component Match<T any>(data T, [case] T) ([then] T, else T)

// List / Map operations

#extern(list list_len, map map_len)
pub component Len<T list<any> | map<any>>(data T) (res int)

#extern(indexer)
pub component Index<T any>(data list<T>, idx int) (res T, err error)
