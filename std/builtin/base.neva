type {
    pub any
    pub maybe<T>
    
    pub bool
    pub string
    pub int
    pub float
    
    pub map<T>
    pub list<T>
    pub stream<T> maybe<T>
    
    pub error struct {
        text string
        child maybe<error>
    }
}

component {
    #extern(emitter)
    pub Emitter<T>() (msg T)

    #extern(destructor)
    pub Destructor(msg any) ()

    #extern(blocker)
    pub Blocker<T>(sig any, data T) (data T)

    #extern(checker)
    pub Checker(opt maybe<T>) (some T, none struct{})

    #autoports
    #extern(struct_builder)
    pub StructBuilder<T struct {}> () (msg T)

    #extern(struct_selector)
    pub StructSelector<T>(msg struct {}) (msg T)

    #extern(string str_len, list list_len, map map_len)
    pub Len<
        T string | list<any> | map<any>
    >(data T) (n int)
}