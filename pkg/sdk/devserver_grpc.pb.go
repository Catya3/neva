// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sdk

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DevClient is the client API for Dev service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DevClient interface {
	ListPrograms(ctx context.Context, in *ListProgramsRequest, opts ...grpc.CallOption) (*ListProgramsResponse, error)
	GetProgram(ctx context.Context, in *GetProgramRequest, opts ...grpc.CallOption) (*GetProgramResponse, error)
	UpdateProgram(ctx context.Context, in *UpdateProgramRequest, opts ...grpc.CallOption) (*UpdateProgramResponse, error)
	StartDebugger(ctx context.Context, in *StartDebugRequest, opts ...grpc.CallOption) (Dev_StartDebuggerClient, error)
	SendDebugMessage(ctx context.Context, in *DebugRequest, opts ...grpc.CallOption) (Dev_SendDebugMessageClient, error)
}

type devClient struct {
	cc grpc.ClientConnInterface
}

func NewDevClient(cc grpc.ClientConnInterface) DevClient {
	return &devClient{cc}
}

func (c *devClient) ListPrograms(ctx context.Context, in *ListProgramsRequest, opts ...grpc.CallOption) (*ListProgramsResponse, error) {
	out := new(ListProgramsResponse)
	err := c.cc.Invoke(ctx, "/devserver.Dev/ListPrograms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devClient) GetProgram(ctx context.Context, in *GetProgramRequest, opts ...grpc.CallOption) (*GetProgramResponse, error) {
	out := new(GetProgramResponse)
	err := c.cc.Invoke(ctx, "/devserver.Dev/GetProgram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devClient) UpdateProgram(ctx context.Context, in *UpdateProgramRequest, opts ...grpc.CallOption) (*UpdateProgramResponse, error) {
	out := new(UpdateProgramResponse)
	err := c.cc.Invoke(ctx, "/devserver.Dev/UpdateProgram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devClient) StartDebugger(ctx context.Context, in *StartDebugRequest, opts ...grpc.CallOption) (Dev_StartDebuggerClient, error) {
	stream, err := c.cc.NewStream(ctx, &Dev_ServiceDesc.Streams[0], "/devserver.Dev/StartDebugger", opts...)
	if err != nil {
		return nil, err
	}
	x := &devStartDebuggerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Dev_StartDebuggerClient interface {
	Recv() (*StartDebugResponse, error)
	grpc.ClientStream
}

type devStartDebuggerClient struct {
	grpc.ClientStream
}

func (x *devStartDebuggerClient) Recv() (*StartDebugResponse, error) {
	m := new(StartDebugResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *devClient) SendDebugMessage(ctx context.Context, in *DebugRequest, opts ...grpc.CallOption) (Dev_SendDebugMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &Dev_ServiceDesc.Streams[1], "/devserver.Dev/SendDebugMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &devSendDebugMessageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Dev_SendDebugMessageClient interface {
	Recv() (*DebugResponse, error)
	grpc.ClientStream
}

type devSendDebugMessageClient struct {
	grpc.ClientStream
}

func (x *devSendDebugMessageClient) Recv() (*DebugResponse, error) {
	m := new(DebugResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DevServer is the server API for Dev service.
// All implementations must embed UnimplementedDevServer
// for forward compatibility
type DevServer interface {
	ListPrograms(context.Context, *ListProgramsRequest) (*ListProgramsResponse, error)
	GetProgram(context.Context, *GetProgramRequest) (*GetProgramResponse, error)
	UpdateProgram(context.Context, *UpdateProgramRequest) (*UpdateProgramResponse, error)
	StartDebugger(*StartDebugRequest, Dev_StartDebuggerServer) error
	SendDebugMessage(*DebugRequest, Dev_SendDebugMessageServer) error
	mustEmbedUnimplementedDevServer()
}

// UnimplementedDevServer must be embedded to have forward compatible implementations.
type UnimplementedDevServer struct {
}

func (UnimplementedDevServer) ListPrograms(context.Context, *ListProgramsRequest) (*ListProgramsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPrograms not implemented")
}
func (UnimplementedDevServer) GetProgram(context.Context, *GetProgramRequest) (*GetProgramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProgram not implemented")
}
func (UnimplementedDevServer) UpdateProgram(context.Context, *UpdateProgramRequest) (*UpdateProgramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProgram not implemented")
}
func (UnimplementedDevServer) StartDebugger(*StartDebugRequest, Dev_StartDebuggerServer) error {
	return status.Errorf(codes.Unimplemented, "method StartDebugger not implemented")
}
func (UnimplementedDevServer) SendDebugMessage(*DebugRequest, Dev_SendDebugMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method SendDebugMessage not implemented")
}
func (UnimplementedDevServer) mustEmbedUnimplementedDevServer() {}

// UnsafeDevServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DevServer will
// result in compilation errors.
type UnsafeDevServer interface {
	mustEmbedUnimplementedDevServer()
}

func RegisterDevServer(s grpc.ServiceRegistrar, srv DevServer) {
	s.RegisterService(&Dev_ServiceDesc, srv)
}

func _Dev_ListPrograms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProgramsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevServer).ListPrograms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/devserver.Dev/ListPrograms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevServer).ListPrograms(ctx, req.(*ListProgramsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dev_GetProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProgramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevServer).GetProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/devserver.Dev/GetProgram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevServer).GetProgram(ctx, req.(*GetProgramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dev_UpdateProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProgramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevServer).UpdateProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/devserver.Dev/UpdateProgram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevServer).UpdateProgram(ctx, req.(*UpdateProgramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dev_StartDebugger_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StartDebugRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DevServer).StartDebugger(m, &devStartDebuggerServer{stream})
}

type Dev_StartDebuggerServer interface {
	Send(*StartDebugResponse) error
	grpc.ServerStream
}

type devStartDebuggerServer struct {
	grpc.ServerStream
}

func (x *devStartDebuggerServer) Send(m *StartDebugResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Dev_SendDebugMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DebugRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DevServer).SendDebugMessage(m, &devSendDebugMessageServer{stream})
}

type Dev_SendDebugMessageServer interface {
	Send(*DebugResponse) error
	grpc.ServerStream
}

type devSendDebugMessageServer struct {
	grpc.ServerStream
}

func (x *devSendDebugMessageServer) Send(m *DebugResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Dev_ServiceDesc is the grpc.ServiceDesc for Dev service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dev_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "devserver.Dev",
	HandlerType: (*DevServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPrograms",
			Handler:    _Dev_ListPrograms_Handler,
		},
		{
			MethodName: "GetProgram",
			Handler:    _Dev_GetProgram_Handler,
		},
		{
			MethodName: "UpdateProgram",
			Handler:    _Dev_UpdateProgram_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartDebugger",
			Handler:       _Dev_StartDebugger_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SendDebugMessage",
			Handler:       _Dev_SendDebugMessage_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/devserver.proto",
}
