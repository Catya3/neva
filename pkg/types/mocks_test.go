// Code generated by MockGen. DO NOT EDIT.
// Source: resolver.go

// Package types_test is a generated GoMock package.
package types_test

import (
	reflect "reflect"

	types "github.com/emil14/neva/pkg/types"
	gomock "github.com/golang/mock/gomock"
)

// MockrecursionChecker is a mock of recursionChecker interface.
type MockrecursionChecker struct {
	ctrl     *gomock.Controller
	recorder *MockrecursionCheckerMockRecorder
}

// MockrecursionCheckerMockRecorder is the mock recorder for MockrecursionChecker.
type MockrecursionCheckerMockRecorder struct {
	mock *MockrecursionChecker
}

// NewMockrecursionChecker creates a new mock instance.
func NewMockrecursionChecker(ctrl *gomock.Controller) *MockrecursionChecker {
	mock := &MockrecursionChecker{ctrl: ctrl}
	mock.recorder = &MockrecursionCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockrecursionChecker) EXPECT() *MockrecursionCheckerMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockrecursionChecker) Check(arg0 types.Trace, arg1 map[string]types.Def) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Check indicates an expected call of Check.
func (mr *MockrecursionCheckerMockRecorder) Check(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockrecursionChecker)(nil).Check), arg0, arg1)
}

// MockexpressionValidator is a mock of expressionValidator interface.
type MockexpressionValidator struct {
	ctrl     *gomock.Controller
	recorder *MockexpressionValidatorMockRecorder
}

// MockexpressionValidatorMockRecorder is the mock recorder for MockexpressionValidator.
type MockexpressionValidatorMockRecorder struct {
	mock *MockexpressionValidator
}

// NewMockexpressionValidator creates a new mock instance.
func NewMockexpressionValidator(ctrl *gomock.Controller) *MockexpressionValidator {
	mock := &MockexpressionValidator{ctrl: ctrl}
	mock.recorder = &MockexpressionValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockexpressionValidator) EXPECT() *MockexpressionValidatorMockRecorder {
	return m.recorder
}

// Validate mocks base method.
func (m *MockexpressionValidator) Validate(arg0 types.Expr) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockexpressionValidatorMockRecorder) Validate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockexpressionValidator)(nil).Validate), arg0)
}

// MocksubtypeChecker is a mock of subtypeChecker interface.
type MocksubtypeChecker struct {
	ctrl     *gomock.Controller
	recorder *MocksubtypeCheckerMockRecorder
}

// MocksubtypeCheckerMockRecorder is the mock recorder for MocksubtypeChecker.
type MocksubtypeCheckerMockRecorder struct {
	mock *MocksubtypeChecker
}

// NewMocksubtypeChecker creates a new mock instance.
func NewMocksubtypeChecker(ctrl *gomock.Controller) *MocksubtypeChecker {
	mock := &MocksubtypeChecker{ctrl: ctrl}
	mock.recorder = &MocksubtypeCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocksubtypeChecker) EXPECT() *MocksubtypeCheckerMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MocksubtypeChecker) Check(arg0 types.Expr, arg1 types.Trace, arg2 types.Expr, arg3 types.Trace, arg4 map[string]types.Def) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// Check indicates an expected call of Check.
func (mr *MocksubtypeCheckerMockRecorder) Check(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MocksubtypeChecker)(nil).Check), arg0, arg1, arg2, arg3, arg4)
}
