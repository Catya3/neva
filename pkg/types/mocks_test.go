// Code generated by MockGen. DO NOT EDIT.
// Source: resolver.go

// Package types_test is a generated GoMock package.
package types_test

import (
	reflect "reflect"

	types "github.com/emil14/neva/pkg/types"
	gomock "github.com/golang/mock/gomock"
)

// Mockvalidator is a mock of validator interface.
type Mockvalidator struct {
	ctrl     *gomock.Controller
	recorder *MockvalidatorMockRecorder
}

// MockvalidatorMockRecorder is the mock recorder for Mockvalidator.
type MockvalidatorMockRecorder struct {
	mock *Mockvalidator
}

// NewMockvalidator creates a new mock instance.
func NewMockvalidator(ctrl *gomock.Controller) *Mockvalidator {
	mock := &Mockvalidator{ctrl: ctrl}
	mock.recorder = &MockvalidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockvalidator) EXPECT() *MockvalidatorMockRecorder {
	return m.recorder
}

// Validate mocks base method.
func (m *Mockvalidator) Validate(arg0 types.Expr) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockvalidatorMockRecorder) Validate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*Mockvalidator)(nil).Validate), arg0)
}

// Mockchecker is a mock of checker interface.
type Mockchecker struct {
	ctrl     *gomock.Controller
	recorder *MockcheckerMockRecorder
}

// MockcheckerMockRecorder is the mock recorder for Mockchecker.
type MockcheckerMockRecorder struct {
	mock *Mockchecker
}

// NewMockchecker creates a new mock instance.
func NewMockchecker(ctrl *gomock.Controller) *Mockchecker {
	mock := &Mockchecker{ctrl: ctrl}
	mock.recorder = &MockcheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockchecker) EXPECT() *MockcheckerMockRecorder {
	return m.recorder
}

// SubTypeCheck mocks base method.
func (m *Mockchecker) SubTypeCheck(arg0, arg1 types.Expr) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubTypeCheck", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubTypeCheck indicates an expected call of SubTypeCheck.
func (mr *MockcheckerMockRecorder) SubTypeCheck(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubTypeCheck", reflect.TypeOf((*Mockchecker)(nil).SubTypeCheck), arg0, arg1)
}
