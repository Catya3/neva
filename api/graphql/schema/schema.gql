schema {
  mutation: Mutation
  query: Query
}

type Query {
  component(input: ComponentInput): Component!
}

input LocationInput {
  pkgName: String!
  fileName: String!
}

type Component {
  interface: Interface!
  nodes: [Node!]!
  net: [Connection!]!
}

type Interface {
  typeParams: [TypeParam]!
  io: IO!
}

type TypeParam {
  name: String!
  constr: String
}

type IO {
  in: [Port]!
  out: [Port]!
}

type Port {
	TypeExpr: String!
	IsArray:  Boolean!
}

type Node {
  entityRef: EntityRef!
  TypeArgs: [String]!
  ComponentDI: [Node]!
}

type EntityRef {
  pkg: String!
  name: String!  
}

type Connection {
  SenderSide:    ReceiverConnectionSide!
  ReceiverSides: [SenderConnectionSide!]!
}

type ReceiverConnectionSide {
  PortAddr: PortAddr!
  Selectors: [String]!
}

type SenderConnectionSide {
  ConstRef: EntityRef
  PortAddr: PortAddr
  Selectors: [String]!
}

type PortAddr {
	Node: String!
	Port: Int!
	Idx:  Int
}

type Mutation {
  updateComponent(loc: LocationInput!, component: ComponentInput!): Component!
}

input ComponentInput {
  interface: InterfaceInput!
  nodes: [NodeInput]!
  net: [ConnectionInput!]!
}

input InterfaceInput {
  typeParams: [TypeParamInput]!
  io: IOInput!
}

input TypeParamInput {
  name: String!
  constr: String
}

input IOInput {
  in: [PortInput]!
  out: [PortInput]!
}

input PortInput {
  typeExpr: String
  isArray: Boolean!
}

input NodeInput {
  entityRef: EntityRefInput!
  typeArgs: [String]!
  componentDI: [NodeInput]!
}

input EntityRefInput {
  pkg: String!
  name: String!
}

input ConnectionInput {
  senderSide: ReceiverConnectionSideInput!
  receiverSides: [SenderConnectionSideInput!]!
}

input ReceiverConnectionSideInput {
  portAddr: PortAddrInput!
  selectors: [String]!
}

input SenderConnectionSideInput {
  constRef: EntityRefInput
  portAddr: PortAddrInput
  selectors: [String]!
}

input PortAddrInput {
  node: String!
  port: Int!
  idx: Int
}
