// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package api

import (
	"fmt"
	"io"
	"strconv"
)

type Connection struct {
	From *PortAddr   `json:"from"`
	To   []*PortAddr `json:"to"`
}

type Dep struct {
	ModuleName string  `json:"moduleName"`
	Ports      []*Port `json:"ports"`
}

type Module struct {
	Deps     []*Dep    `json:"deps"`
	Inports  []*Port   `json:"inports"`
	Outports []*Port   `json:"outports"`
	Workers  []*Worker `json:"workers"`
	Net      []*Node   `json:"net"`
}

type Node struct {
	Worker              *string       `json:"worker"`
	IncomingConnections []*Connection `json:"incomingConnections"`
}

type Port struct {
	Name string `json:"name"`
	Type Type   `json:"type"`
}

type PortAddr struct {
	Node string `json:"node"`
	Port string `json:"port"`
	Idx  int    `json:"idx"`
}

type Worker struct {
	Name          string `json:"name"`
	DepModuleName string `json:"depModuleName"`
}

type Type string

const (
	TypeInt  Type = "INT"
	TypeBool Type = "BOOL"
	TypeStr  Type = "STR"
)

var AllType = []Type{
	TypeInt,
	TypeBool,
	TypeStr,
}

func (e Type) IsValid() bool {
	switch e {
	case TypeInt, TypeBool, TypeStr:
		return true
	}
	return false
}

func (e Type) String() string {
	return string(e)
}

func (e *Type) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Type(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Type", str)
	}
	return nil
}

func (e Type) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
