// Package parser implements source code parsing.
// It uses parser (and lexer) generated by ANTLR4 from neva.g4 grammar file.
package parser

import (
	"errors"
	"fmt"

	"github.com/antlr4-go/antlr/v4"

	"github.com/nevalang/neva/internal/compiler"
	generated "github.com/nevalang/neva/internal/compiler/parser/generated"
	src "github.com/nevalang/neva/pkg/sourcecode"
)

type treeShapeListener struct {
	*generated.BasenevaListener
	file src.File
}

type Parser struct {
	isDebug bool
}

func (p Parser) ParseModules(
	rawMods map[src.ModuleRef]compiler.RawModule,
) (map[src.ModuleRef]src.Module, *compiler.Error) {
	parsedMods := make(map[src.ModuleRef]src.Module, len(rawMods))

	for modRef, rawMod := range rawMods {
		parsedPkgs, err := p.ParsePackages(rawMod.Packages, modRef)
		if err != nil {
			return nil, compiler.Error{
				Location: &src.Location{ModRef: modRef},
			}.Merge(err)
		}

		parsedMods[modRef] = src.Module{
			Manifest: rawMod.Manifest,
			Packages: parsedPkgs,
		}
	}

	return parsedMods, nil
}

func (p Parser) ParsePackages(
	rawPkgs map[string]compiler.RawPackage,
	modRef src.ModuleRef,
) (map[string]src.Package, *compiler.Error) {
	packages := make(map[string]src.Package, len(rawPkgs))

	for pkgName, pkgFiles := range rawPkgs {
		parsedFiles, err := p.ParseFiles(pkgFiles)
		if err != nil {
			return nil, compiler.Error{
				Location: &src.Location{PkgName: pkgName},
			}.Merge(err)
		}

		packages[pkgName] = parsedFiles
	}

	return packages, nil
}

func (p Parser) ParseFiles(files map[string][]byte) (map[string]src.File, *compiler.Error) {
	result := make(map[string]src.File, len(files))

	for name, fileBytes := range files {
		fileName := name
		v, err := p.ParseFile(fileBytes)
		if err != nil {
			return nil, compiler.Error{
				Location: &src.Location{FileName: fileName},
			}.Merge(err)
		}
		result[fileName] = v
	}

	return result, nil
}

func (p Parser) ParseFile(bb []byte) (f src.File, err *compiler.Error) {
	defer func() {
		if e := recover(); e != nil {
			compilerErr, ok := e.(*compiler.Error)
			if !ok {
				err = &compiler.Error{Err: errors.New(fmt.Sprint(e))}
				return
			}
			err = compilerErr
		}
	}()

	input := antlr.NewInputStream(string(bb))
	lexer := generated.NewnevaLexer(input)
	tokenStream := antlr.NewCommonTokenStream(lexer, 0)

	parse := generated.NewnevaParser(tokenStream)
	if p.isDebug {
		parse.AddErrorListener(antlr.NewDiagnosticErrorListener(true))
	}
	parse.BuildParseTrees = true

	tree := parse.Prog()
	listener := &treeShapeListener{}

	antlr.ParseTreeWalkerDefault.Walk(listener, tree)

	return listener.file, nil
}

func New(isDebug bool) Parser {
	return Parser{isDebug: isDebug}
}
