flow Doer() () {}

pub flow Doer() () {}

flow Doer() () {}

flow Doer<T>(x int) (y T) {}

flow Doer<T>(x int) (y T) {
}

flow Doer<T>(x int) (y T) {

}

flow Doer<T>(x int) (y T) {
}

flow Doer<T>(x int) (y T) {
    nodes {}
}

flow     Doer<T>(x int) (y T) {
    nodes {
    }
}

flow Doer<T>(x int) (y T) {
    nodes { absNode INode }
}

flow Doer<T>(x int) (y T) {
    nodes {
        absNode INode }
}

flow     Doer<T>(x int) (y T) {
    nodes { absNode INode
    }
}

flow Doer<T>(x int) (y T) {
    nodes {
        absNode INode
    }
}

flow Doer<T>(x int) (y T) {
    nodes {
        simpleAbsNode INode
        absNodeWithTypeArgs INode<
            int,
            map<
                string, vec<bool>
            >
        >
    }
}

flow Doer<T>(x int) (y T) {
    nodes { concreteNode  Node }
}

flow Doer<T>(x int) (y T) {
    nodes {
        concreteNode  Node }
}

flow Doer<T>(x int) (y T) {
    nodes { concreteNode  Node
    }
}

flow Doer<T>(x int) (y T) {
    nodes {
        concreteNode  Node
    }
}

flow Doer<T>(x int) (y T) {
    nodes {
        concreteNodeWithTypeArgs  Node<int, vec<string>>
    }
}

flow Doer<T>(x int) (y T) {
    nodes {
        concreteNodeWithDI1  Node1{foo Node2}
        concreteNodeWithDI2  Node1{
            foo Node2
            bar Node3
        }
    }
}

flow Doer<T>(x int) (y T) {
    nodes {
        concreteNodeWithDI1  Node1{
            foo Node2
        }
        concreteNodeWithDI2  Node1{
            foo Node2
            bar Node3
        }
    }
}

flow Doer<T>(x int) (y T) {
    nodes {
        concreteNodeWithDIAndTypeArgs  Node1<
            int,
            map<
                string,
                vec<bool>
            >
        > {
            foo Node2
            bar Node3
        }
    }
}

flow Doer<T>(x int) (y T) {
    nodes {
        simpleAbsNode INode

        absNodeWithTypeArgs INode<
            int,
            map<
                string, vec<bool>
            >
        >

        concreteNodeWithDI1  Node1{ foo Node2 }

        concreteNodeWithDIAndTypeArgs  Node1<
            int,
            map<
                string,
                vec<bool>
            >
        >{
            foo Node2
            bar Node3
        }
    }
}

flow Main(start any) (stop any) {
    nodes {
        abs IReader
        concrete  Scanner
    }
    :start -> abs:v
    abs:v -> [concrete:v]
    concrete:v -> :code
}

flow Main() () {
    $foo.bar -> foo:bar
    $foo.bar.baz -> foo:bar
    foo:bar.baz -> foo:bar
    foo:bar.baz.bax -> foo:bar
    $foo.bar.baz -> [foo:bar, bar:baz]
    foo:bar.baz.bax -> [
        foo:bar,
        bar:baz
    ]
}

flow Main() () {
    $foo -> (foo:bar -> bar:baz)

    $foo -> [(foo:bar -> bar:baz),
    (foo:bar -> bar:baz)
    ]

    $foo -> [(foo:bar -> bar:baz),
        (foo:bar -> bar:baz)
    ]

    $foo -> [
        (foo:bar -> bar:baz),
        (foo:bar -> bar:baz)]

    $foo -> [
        (foo:bar -> bar:baz),
        (foo:bar -> bar:baz)
    ]
}

flow Main() () {
    $a -> ($b -> ($c -> d:e))

    $a -> (
        $b -> ($c -> d:e)
    )

    $a -> (
        $b -> (
            $c -> d:e
        )
    )
}

flow Main(start) (stop) { :start -> :stop }

flow Main(start) (stop) {
    :start -> :stop }

flow Main(start) (stop) { :start -> :stop
}

flow Main(start) (stop) {
    :start -> :stop
}

flow Main() () {
    :foo -> :bar
    :baz -> :bax
}

