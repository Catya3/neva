package server

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.39

import (
	"context"
	"fmt"

	"github.com/nevalang/neva/internal/compiler/src"
	"github.com/nevalang/neva/pkg/gql"
)

// Nodes is the resolver for the nodes field.
func (r *componentResolver) Nodes(ctx context.Context, obj *src.Component) ([]src.Node, error) {
	panic(fmt.Errorf("not implemented: Nodes - nodes"))
}

// SenderSide is the resolver for the SenderSide field.
func (r *connectionResolver) SenderSide(ctx context.Context, obj *src.Connection) (*src.ReceiverConnectionSide, error) {
	panic(fmt.Errorf("not implemented: SenderSide - SenderSide"))
}

// ReceiverSides is the resolver for the ReceiverSides field.
func (r *connectionResolver) ReceiverSides(ctx context.Context, obj *src.Connection) ([]src.SenderConnectionSide, error) {
	panic(fmt.Errorf("not implemented: ReceiverSides - ReceiverSides"))
}

// In is the resolver for the in field.
func (r *iOResolver) In(ctx context.Context, obj *src.IO) ([]*src.Port, error) {
	panic(fmt.Errorf("not implemented: In - in"))
}

// Out is the resolver for the out field.
func (r *iOResolver) Out(ctx context.Context, obj *src.IO) ([]*src.Port, error) {
	panic(fmt.Errorf("not implemented: Out - out"))
}

// TypeParams is the resolver for the typeParams field.
func (r *interfaceResolver) TypeParams(ctx context.Context, obj *src.Interface) ([]*gql.TypeParam, error) {
	panic(fmt.Errorf("not implemented: TypeParams - typeParams"))
}

// UpdateComponent is the resolver for the updateComponent field.
func (r *mutationResolver) UpdateComponent(ctx context.Context, loc gql.LocationInput, component gql.ComponentInput) (*src.Component, error) {
	panic(fmt.Errorf("not implemented: UpdateComponent - updateComponent"))
}

// TypeArgs is the resolver for the TypeArgs field.
func (r *nodeResolver) TypeArgs(ctx context.Context, obj *src.Node) ([]*string, error) {
	panic(fmt.Errorf("not implemented: TypeArgs - TypeArgs"))
}

// ComponentDi is the resolver for the ComponentDI field.
func (r *nodeResolver) ComponentDi(ctx context.Context, obj *src.Node) ([]*src.Node, error) {
	panic(fmt.Errorf("not implemented: ComponentDi - ComponentDI"))
}

// TypeExpr is the resolver for the TypeExpr field.
func (r *portResolver) TypeExpr(ctx context.Context, obj *src.Port) (string, error) {
	panic(fmt.Errorf("not implemented: TypeExpr - TypeExpr"))
}

// Port is the resolver for the Port field.
func (r *portAddrResolver) Port(ctx context.Context, obj *src.PortAddr) (int, error) {
	panic(fmt.Errorf("not implemented: Port - Port"))
}

// Idx is the resolver for the Idx field.
func (r *portAddrResolver) Idx(ctx context.Context, obj *src.PortAddr) (*int, error) {
	panic(fmt.Errorf("not implemented: Idx - Idx"))
}

// Component is the resolver for the component field.
func (r *queryResolver) Component(ctx context.Context, input *gql.ComponentInput) (*src.Component, error) {
	panic(fmt.Errorf("not implemented: Component - component"))
}

// Component returns gql.ComponentResolver implementation.
func (r *Resolver) Component() gql.ComponentResolver { return &componentResolver{r} }

// Connection returns gql.ConnectionResolver implementation.
func (r *Resolver) Connection() gql.ConnectionResolver { return &connectionResolver{r} }

// IO returns gql.IOResolver implementation.
func (r *Resolver) IO() gql.IOResolver { return &iOResolver{r} }

// Interface returns gql.InterfaceResolver implementation.
func (r *Resolver) Interface() gql.InterfaceResolver { return &interfaceResolver{r} }

// Mutation returns gql.MutationResolver implementation.
func (r *Resolver) Mutation() gql.MutationResolver { return &mutationResolver{r} }

// Node returns gql.NodeResolver implementation.
func (r *Resolver) Node() gql.NodeResolver { return &nodeResolver{r} }

// Port returns gql.PortResolver implementation.
func (r *Resolver) Port() gql.PortResolver { return &portResolver{r} }

// PortAddr returns gql.PortAddrResolver implementation.
func (r *Resolver) PortAddr() gql.PortAddrResolver { return &portAddrResolver{r} }

// Query returns gql.QueryResolver implementation.
func (r *Resolver) Query() gql.QueryResolver { return &queryResolver{r} }

type componentResolver struct{ *Resolver }
type connectionResolver struct{ *Resolver }
type iOResolver struct{ *Resolver }
type interfaceResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type nodeResolver struct{ *Resolver }
type portResolver struct{ *Resolver }
type portAddrResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
