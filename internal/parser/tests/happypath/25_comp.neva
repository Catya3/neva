components {}

components {
}

components {

}

components { Doer() () {} }

components {
    Doer() () {} }

components { Doer() () {}
}

components {
    Doer() () {}
}

components { Doer<T>(x int) (y T) {} }

components {
    Doer<T>(x int) (y T) {
    }
}

components {
    Doer<T>(x int) (y T) {

    }
}

components {
    Doer<T>(x int) (y T) {
    }
}

components {
    Doer<T>(x int) (y T) {
        node {}
    }
}

components {
    Doer<T>(x int) (y T) {
        node {
        }
    }
}

components {
    Doer<T>(x int) (y T) {
        node { absNode INode }
    }
}

components {
    Doer<T>(x int) (y T) {
        node {
            absNode INode }
    }
}

components {
    Doer<T>(x int) (y T) {
        node { absNode INode
        }
    }
}

components {
    Doer<T>(x int) (y T) {
        node {
            absNode INode
        }
    }
}

components {
    Doer<T>(x int) (y T) {
        node {
            simpleAbsNode INode
            absNodeWithTypeArgs INode<
                int,
                map<
                    str, vec<bool>
                >
            >
        }
    }
}

components {
    Doer<T>(x int) (y T) {
        node { concreteNode = Node() }
    }
}

components {
    Doer<T>(x int) (y T) {
        node {
            concreteNode = Node() }
    }
}

components {
    Doer<T>(x int) (y T) {
        node { concreteNode = Node()
        }
    }
}

components {
    Doer<T>(x int) (y T) {
        node {
            concreteNode = Node()
        }
    }
}

components {
    Doer<T>(x int) (y T) {
        node {
            concreteNodeWithTypeArgs = Node<int, vec<str>>()
        }
    }
}

components {
    Doer<T>(x int) (y T) {
        node {
            concreteNodeWithDI1 = Node1(Node2())
            concreteNodeWithDI2 = Node1(Node2(), Node3())
        }
    }
}

components {
    Doer<T>(x int) (y T) {
        node {
            concreteNodeWithDI1 = Node1(
                Node2()
            )
            concreteNodeWithDI2 = Node1(
                Node2(),
                Node3()
            )
        }
    }
}

components {
    Doer<T>(x int) (y T) {
        node {
            concreteNodeWithDIAndTypeArgs = Node1<
                int,
                map<
                    str,
                    vec<bool>
                >
            >(
                Node2(),
                Node3()
            )
        }
    }
}

components {
    Doer<T>(x int) (y T) {
        node {
            simpleAbsNode INode

            absNodeWithTypeArgs INode<
                int,
                map<
                    str, vec<bool>
                >
            >

            concreteNodeWithDI1 = Node1(Node2())

            concreteNodeWithDIAndTypeArgs = Node1<
                int,
                map<
                    str,
                    vec<bool>
                >
            >(
                Node2(),
                Node3()
            )
        }
    }
}

components {
	Main(enter) (exit) {
		nodes {
			abs IReader
			concrete = io.Reader()
		}
		net {
			in.start -> abs.in.v
			abs.out.v -> {
				concrete.in.v
			}
			concrete.out.v -> out.code
		}
	}
}